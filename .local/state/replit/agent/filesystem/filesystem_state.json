{"file_contents":{"README.md":{"content":"# Warehouse Pallet Racking Inspection & Certification Management System\n\nA comprehensive Django-based system for managing warehouse pallet racking inspections with interactive layout editing, defect tracking, and automated reporting.\n\n## Features\n\n- **Interactive Layout Editor**: Canvas-based warehouse layout design using Konva.js\n- **Inspection Workflow**: Click-to-inspect components with severity-based color coding\n- **Automated Reporting**: Professional PDF generation with WeasyPrint\n- **User Management**: Role-based access for Inspectors and Administrators\n- **Real-time Dashboard**: Statistics and urgent items monitoring\n- **Data Import/Export**: CSV support for layout backup and restoration\n- **Notification System**: Automated alerts for amber/red defects\n\n## Tech Stack\n\n### Backend\n- **Django 5.0.1**: Python web framework\n- **PostgreSQL**: Primary database\n- **django-vite**: Asset bundling with Vite\n- **django-htmx**: Server-driven interactivity\n- **django-allauth**: Authentication system\n- **django-unfold**: Modern admin interface\n- **WeasyPrint**: PDF report generation\n\n### Frontend\n- **HTMX**: Partial page updates without JavaScript frameworks\n- **Alpine.js**: Lightweight client-side reactivity\n- **Tailwind CSS v4**: Utility-first styling\n- **Konva.js**: Interactive canvas for warehouse layouts\n- **Font Awesome**: Local icon library\n\n## Installation\n\n### Prerequisites\n- Python 3.12+\n- Node.js 18+\n- PostgreSQL 12+\n- UV (Python package manager)\n\n### Setup Instructions\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd warehouse-inspection-system\n   ```\n\n2. **Create Python virtual environment with UV**\n   ```bash\n   uv venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   ```\n\n3. **Install Python dependencies**\n   ```bash\n   uv pip install -r requirements.txt\n   ```\n\n4. **Configure PostgreSQL**\n   ```bash\n   # Create database\n   createdb warehouse_inspection\n   \n   # Set environment variables\n   export PGDATABASE=warehouse_inspection\n   export PGUSER=your_username\n   export PGPASSWORD=your_password\n   export PGHOST=localhost\n   export PGPORT=5432\n   ```\n\n5. **Run database migrations**\n   ```bash\n   python manage.py makemigrations\n   python manage.py migrate\n   ```\n\n6. **Create superuser**\n   ```bash\n   python manage.py createsuperuser\n   ```\n\n7. **Load sample data (optional)**\n   ```bash\n   python manage.py create_sample_data\n   ```\n\n8. **Install Node.js dependencies**\n   ```bash\n   npm install\n   ```\n\n9. **Build frontend assets**\n   ```bash\n   npm run build\n   ```\n\n10. **Collect static files**\n    ```bash\n    python manage.py collectstatic --noinput\n    ```\n\n## Development\n\n### Running the Development Server\n\n1. **Start Django development server**\n   ```bash\n   python manage.py runserver 0.0.0.0:5000\n   ```\n\n2. **Start Vite development server (optional, for hot reloading)**\n   ```bash\n   npm run dev\n   ```\n\n### Project Structure\n\n","size_bytes":2935},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'warehouse_inspection.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":676},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest-django>=4.8.0\",\n    \"pytest-cov>=4.0.0\",\n    \"black>=23.0.0\",\n    \"flake8>=6.0.0\",\n    \"pre-commit>=3.0.0\"\n]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py312']\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n  migrations\n)/\n'''\n\n[tool.pytest.ini_options]\nDJANGO_SETTINGS_MODULE = \"warehouse_inspection.settings\"\npython_files = [\"tests.py\", \"test_*.py\", \"*_tests.py\"]\n","size_bytes":464},"replit.md":{"content":"# Overview\n\nThis is a comprehensive warehouse pallet racking inspection and certification management system built to help organizations manage warehouse safety through systematic inspections, defect tracking, and automated reporting. The system provides an interactive warehouse layout editor, click-to-inspect workflow, severity-based color coding, and professional PDF report generation.\n\nThe platform serves two primary user roles: Inspectors who conduct inspections and mark defects, and Administrators who manage layouts, generate reports, and oversee the system. The system emphasizes visual interaction through canvas-based warehouse layout editing and real-time dashboard monitoring of urgent items.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Modern Full-Stack Architecture\n\nThe system uses a modern full-stack JavaScript architecture with Express.js backend and React frontend, providing a cohesive development experience.\n\n**Backend**: Express.js serves as the REST API backend with PostgreSQL database, handling authentication via Replit Auth, data processing, and API endpoints.\n\n**Frontend**: React with TypeScript provides the user interface, using TanStack Query for state management and data fetching, Vite for bundling.\n\n**Database**: Drizzle ORM with PostgreSQL handles data persistence, with schemas defined in TypeScript for type safety across the stack.\n\n## Authentication & Authorization\n\nThe system implements Replit Auth for user authentication, with role-based access control distinguishing between Inspector and Administrator users. User profiles extend the base authentication to include role assignments and certification details.\n\nExpress sessions with PostgreSQL storage provide secure session management and user state persistence.\n\n## Interactive Canvas System\n\nThe warehouse layout editor uses Konva.js for interactive canvas manipulation, allowing users to draw and edit warehouse components directly on screen. Components are stored with position coordinates and rendered dynamically.\n\nFor inspections, the same canvas system enables click-to-inspect functionality where users can select components and immediately create inspection records with severity classifications.\n\n## Real-time Dashboard\n\nThe dashboard provides live monitoring of warehouse status with automatic color coding:\n- **Red**: Immediate threats requiring instant attention\n- **Amber**: Issues requiring fixes within 4 weeks  \n- **Green**: Components that only need monitoring\n\nStatistics update automatically and urgent items are prominently displayed with notification badges.\n\n## Report Generation Architecture\n\nProfessional PDF reports are generated server-side using WeasyPrint, with customizable templates that can include:\n- Warehouse layout diagrams\n- Inspection photos and details\n- Inspector information and certifications\n- Compliance summaries and recommendations\n\nReports can be filtered by date ranges and include various detail levels from summary views to comprehensive defect listings.\n\n## Asset Management\n\nThe system uses Vite for frontend asset bundling and optimization. Static assets including fonts (Font Awesome) and styles (Tailwind CSS) are processed locally rather than relying on CDNs for better performance and reliability.\n\nExpress.js serves static files and handles asset delivery through Vite in development mode.\n\n# External Dependencies\n\n## Database Services\n- **PostgreSQL**: Primary database for all application data\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n\n## Authentication Services  \n- **Replit Auth**: Primary authentication provider\n- **Express Sessions**: Secure session management with PostgreSQL storage\n\n## UI & Styling Libraries\n- **Tailwind CSS v4**: Utility-first styling framework\n- **Radix UI**: Accessible component primitives for React\n- **Font Awesome**: Icon library (self-hosted, not CDN)\n- **Konva.js**: Interactive 2D canvas library for warehouse layouts\n\n## Development & Build Tools\n- **Vite**: Frontend build tool and asset bundling\n- **TypeScript**: Type safety across frontend and shared code\n- **TanStack Query**: Data fetching and caching for React\n- **Express.js**: Node.js web framework for backend API\n\n## Document Generation\n- **WeasyPrint**: Professional PDF report generation\n- **Python Imaging Library (PIL)**: Image processing for reports\n\n## Testing & Development\n- **Jest/React Testing Library**: Frontend testing framework\n- **Node.js Testing**: Backend testing with standard Node.js testing frameworks\n- **Hot Module Replacement**: Development experience optimization\n\nThe system is designed to be self-contained with minimal external service dependencies, focusing on reliability and performance through local asset management and robust caching strategies.","size_bytes":4833},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport { resolve } from 'path';\n\nexport default defineConfig({\n  root: 'static',\n  base: '/static/',\n  \n  build: {\n    outDir: '../staticfiles/dist',\n    emptyOutDir: false,\n    manifest: true,\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'static/css/main.css'),\n        'layout-editor': resolve(__dirname, 'static/js/layout-editor.js'),\n        'inspection': resolve(__dirname, 'static/js/inspection.js'),\n        'alpine-extensions': resolve(__dirname, 'static/js/alpine-extensions.js')\n      },\n      output: {\n        entryFileNames: 'js/[name]-[hash].js',\n        chunkFileNames: 'js/[name]-[hash].js',\n        assetFileNames: (assetInfo) => {\n          const info = assetInfo.name.split('.');\n          const extType = info[info.length - 1];\n          if (/\\.(css)$/.test(assetInfo.name)) {\n            return 'css/[name]-[hash].[ext]';\n          }\n          if (/\\.(png|jpe?g|svg|gif|tiff|bmp|ico)$/i.test(assetInfo.name)) {\n            return 'img/[name]-[hash].[ext]';\n          }\n          return 'assets/[name]-[hash].[ext]';\n        }\n      }\n    }\n  },\n  \n  server: {\n    port: 3000,\n    strictPort: true,\n    hmr: {\n      port: 3001\n    }\n  },\n  \n  css: {\n    preprocessorOptions: {\n      scss: {\n        additionalData: '@import \"./styles/variables.scss\";'\n      }\n    }\n  },\n  \n  plugins: [],\n  \n  resolve: {\n    alias: {\n      '@': resolve(__dirname, 'static'),\n      '@css': resolve(__dirname, 'static/css'),\n      '@js': resolve(__dirname, 'static/js'),\n      '@img': resolve(__dirname, 'static/img')\n    }\n  },\n  \n  optimizeDeps: {\n    include: [\n      'konva'\n    ]\n  }\n});\n","size_bytes":1656},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"core/__init__.py":{"content":"","size_bytes":0},"core/admin.py":{"content":"from django.contrib import admin\nfrom unfold.admin import ModelAdmin\nfrom import_export.admin import ImportExportModelAdmin\nfrom import_export import resources\nfrom .models import (\n    WarehouseLayout, WarehouseComponent, Inspection, InspectionPhoto,\n    UserProfile, Report, Notification\n)\n\n\nclass WarehouseComponentResource(resources.ModelResource):\n    class Meta:\n        model = WarehouseComponent\n        fields = ('id', 'layout__name', 'component_type', 'x_position', 'y_position', \n                 'width', 'height', 'status')\n        export_order = fields\n\n\n@admin.register(WarehouseLayout)\nclass WarehouseLayoutAdmin(ModelAdmin):\n    list_display = ('name', 'created_by', 'is_active', 'created_at', 'updated_at')\n    list_filter = ('is_active', 'created_at')\n    search_fields = ('name', 'description')\n    readonly_fields = ('created_at', 'updated_at')\n\n\n@admin.register(WarehouseComponent)\nclass WarehouseComponentAdmin(ImportExportModelAdmin, ModelAdmin):\n    resource_class = WarehouseComponentResource\n    list_display = ('id', 'layout', 'component_type', 'status', 'x_position', 'y_position')\n    list_filter = ('component_type', 'status', 'layout')\n    search_fields = ('id', 'layout__name')\n    ordering = ('layout', 'id')\n\n\nclass InspectionPhotoInline(admin.TabularInline):\n    model = InspectionPhoto\n    extra = 0\n\n\n@admin.register(Inspection)\nclass InspectionAdmin(ModelAdmin):\n    list_display = ('component', 'inspector', 'defect_type', 'severity', 'inspection_date', \n                   'is_resolved', 'is_overdue')\n    list_filter = ('severity', 'defect_type', 'is_resolved', 'inspection_date')\n    search_fields = ('component__id', 'inspector__username', 'notes')\n    readonly_fields = ('inspection_date',)\n    inlines = [InspectionPhotoInline]\n    \n    def is_overdue(self, obj):\n        return obj.is_overdue\n    is_overdue.boolean = True\n    is_overdue.short_description = 'Overdue'\n\n\n@admin.register(UserProfile)\nclass UserProfileAdmin(ModelAdmin):\n    list_display = ('user', 'role', 'certification_number', 'certification_expiry')\n    list_filter = ('role',)\n    search_fields = ('user__username', 'user__email', 'certification_number')\n\n\n@admin.register(Report)\nclass ReportAdmin(ModelAdmin):\n    list_display = ('layout', 'report_type', 'generated_by', 'generated_at', 'date_from', 'date_to')\n    list_filter = ('report_type', 'generated_at')\n    search_fields = ('layout__name', 'generated_by__username')\n    readonly_fields = ('generated_at',)\n\n\n@admin.register(Notification)\nclass NotificationAdmin(ModelAdmin):\n    list_display = ('user', 'notification_type', 'inspection', 'is_read', 'created_at', 'sent_at')\n    list_filter = ('notification_type', 'is_read', 'created_at')\n    search_fields = ('user__username', 'message')\n    readonly_fields = ('created_at',)\n","size_bytes":2804},"core/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'\n","size_bytes":140},"core/forms.py":{"content":"from django import forms\nfrom django.contrib.auth.models import User\nfrom .models import (\n    Inspection, WarehouseComponent, WarehouseLayout, Report, UserProfile,\n    DefectType, SeverityLevel, ComponentType, ComponentStatus\n)\n\n\nclass InspectionForm(forms.ModelForm):\n    class Meta:\n        model = Inspection\n        fields = ['component', 'defect_type', 'custom_defect', 'severity', 'notes']\n        widgets = {\n            'component': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'defect_type': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'custom_defect': forms.TextInput(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary', 'placeholder': 'Required if defect type is Custom'}),\n            'severity': forms.RadioSelect(attrs={'class': 'text-primary focus:ring-primary'}),\n            'notes': forms.Textarea(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary', 'rows': 3, 'placeholder': 'Additional inspection notes...'}),\n        }\n\n\nclass ComponentForm(forms.ModelForm):\n    class Meta:\n        model = WarehouseComponent\n        fields = ['id', 'component_type', 'status']\n        widgets = {\n            'id': forms.TextInput(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary', 'placeholder': 'RK-A1-B1'}),\n            'component_type': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'status': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n        }\n\n\nclass ReportForm(forms.ModelForm):\n    class Meta:\n        model = Report\n        fields = ['layout', 'report_type', 'date_from', 'date_to', 'include_layout', 'include_photos', 'include_inspector_details']\n        widgets = {\n            'layout': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'report_type': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'date_from': forms.DateInput(attrs={'type': 'date', 'class': 'px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'date_to': forms.DateInput(attrs={'type': 'date', 'class': 'px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'include_layout': forms.CheckboxInput(attrs={'class': 'text-primary focus:ring-primary'}),\n            'include_photos': forms.CheckboxInput(attrs={'class': 'text-primary focus:ring-primary'}),\n            'include_inspector_details': forms.CheckboxInput(attrs={'class': 'text-primary focus:ring-primary'}),\n        }\n\n\nclass UserProfileForm(forms.ModelForm):\n    first_name = forms.CharField(max_length=30, required=False)\n    last_name = forms.CharField(max_length=30, required=False)\n    email = forms.EmailField()\n    \n    class Meta:\n        model = UserProfile\n        fields = ['role', 'phone', 'certification_number', 'certification_expiry']\n        widgets = {\n            'role': forms.Select(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'phone': forms.TextInput(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'certification_number': forms.TextInput(attrs={'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n            'certification_expiry': forms.DateInput(attrs={'type': 'date', 'class': 'w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary'}),\n        }\n    \n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n        \n        if user:\n            self.fields['first_name'].initial = user.first_name\n            self.fields['last_name'].initial = user.last_name\n            self.fields['email'].initial = user.email\n    \n    def save(self, commit=True):\n        profile = super().save(commit=False)\n        \n        # Update user fields\n        user = profile.user\n        user.first_name = self.cleaned_data['first_name']\n        user.last_name = self.cleaned_data['last_name']\n        user.email = self.cleaned_data['email']\n        \n        if commit:\n            user.save()\n            profile.save()\n        \n        return profile\n","size_bytes":5064},"core/models.py":{"content":"from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.utils import timezone\nimport uuid\n\n\nclass WarehouseLayout(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE)\n    is_active = models.BooleanField(default=True)\n\n    class Meta:\n        ordering = ['-updated_at']\n\n    def __str__(self):\n        return self.name\n\n\nclass ComponentType(models.TextChoices):\n    RACK = 'rack', 'Rack'\n    BEAM = 'beam', 'Beam'\n    UPRIGHT = 'upright', 'Upright'\n\n\nclass ComponentStatus(models.TextChoices):\n    GOOD = 'good', 'Good'\n    MONITOR = 'monitor', 'Monitor'\n    FIX_4_WEEKS = 'fix_4_weeks', 'Fix Within 4 Weeks'\n    IMMEDIATE = 'immediate', 'Immediate Threat'\n\n\nclass WarehouseComponent(models.Model):\n    id = models.CharField(max_length=50, primary_key=True)\n    layout = models.ForeignKey(WarehouseLayout, on_delete=models.CASCADE, related_name='components')\n    component_type = models.CharField(max_length=20, choices=ComponentType.choices)\n    x_position = models.FloatField()\n    y_position = models.FloatField()\n    width = models.FloatField()\n    height = models.FloatField()\n    status = models.CharField(max_length=20, choices=ComponentStatus.choices, default=ComponentStatus.GOOD)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        ordering = ['id']\n\n    def __str__(self):\n        return f\"{self.id} ({self.get_component_type_display()})\"\n\n    @property\n    def status_color(self):\n        color_map = {\n            ComponentStatus.GOOD: 'success',\n            ComponentStatus.MONITOR: 'success',\n            ComponentStatus.FIX_4_WEEKS: 'warning',\n            ComponentStatus.IMMEDIATE: 'danger'\n        }\n        return color_map.get(self.status, 'primary')\n\n\nclass DefectType(models.TextChoices):\n    BENT_UPRIGHT = 'bent_upright', 'Bent Upright'\n    DAMAGED_BEAM = 'damaged_beam', 'Damaged Beam'\n    LOOSE_CONNECTIONS = 'loose_connections', 'Loose Connections'\n    CORROSION = 'corrosion', 'Corrosion/Rust'\n    MISSING_COMPONENTS = 'missing_components', 'Missing Components'\n    OVERLOADING = 'overloading', 'Overloading'\n    CUSTOM = 'custom', 'Custom Defect'\n\n\nclass SeverityLevel(models.TextChoices):\n    GREEN = 'green', 'Monitor - No immediate action required'\n    AMBER = 'amber', 'Fix within 4 weeks'\n    RED = 'red', 'Immediate threat - Fix now'\n\n\nclass Inspection(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    component = models.ForeignKey(WarehouseComponent, on_delete=models.CASCADE, related_name='inspections')\n    inspector = models.ForeignKey(User, on_delete=models.CASCADE)\n    defect_type = models.CharField(max_length=50, choices=DefectType.choices)\n    custom_defect = models.CharField(max_length=255, blank=True, help_text=\"Required if defect type is 'Custom'\")\n    severity = models.CharField(max_length=10, choices=SeverityLevel.choices)\n    notes = models.TextField(blank=True)\n    inspection_date = models.DateTimeField(default=timezone.now)\n    due_date = models.DateField(null=True, blank=True)\n    is_resolved = models.BooleanField(default=False)\n    resolved_date = models.DateTimeField(null=True, blank=True)\n    resolved_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='resolved_inspections')\n\n    class Meta:\n        ordering = ['-inspection_date']\n\n    def save(self, *args, **kwargs):\n        # Auto-calculate due date based on severity\n        if self.severity == SeverityLevel.AMBER and not self.due_date:\n            self.due_date = (self.inspection_date + timezone.timedelta(weeks=4)).date()\n        \n        # Update component status based on severity\n        if self.severity == SeverityLevel.RED:\n            self.component.status = ComponentStatus.IMMEDIATE\n        elif self.severity == SeverityLevel.AMBER:\n            self.component.status = ComponentStatus.FIX_4_WEEKS\n        else:\n            self.component.status = ComponentStatus.MONITOR\n        \n        self.component.save()\n        super().save(*args, **kwargs)\n\n    def __str__(self):\n        defect_name = self.custom_defect if self.defect_type == DefectType.CUSTOM else self.get_defect_type_display()\n        return f\"{self.component.id} - {defect_name} ({self.get_severity_display()})\"\n\n    @property\n    def is_overdue(self):\n        if not self.due_date or self.is_resolved:\n            return False\n        return timezone.now().date() > self.due_date\n\n\nclass InspectionPhoto(models.Model):\n    inspection = models.ForeignKey(Inspection, on_delete=models.CASCADE, related_name='photos')\n    image = models.ImageField(upload_to='inspection_photos/')\n    caption = models.CharField(max_length=255, blank=True)\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Photo for {self.inspection}\"\n\n\nclass UserProfile(models.Model):\n    ROLE_CHOICES = [\n        ('inspector', 'Inspector'),\n        ('admin', 'Administrator'),\n    ]\n    \n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='inspector')\n    phone = models.CharField(max_length=20, blank=True)\n    certification_number = models.CharField(max_length=50, blank=True)\n    certification_expiry = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return f\"{self.user.get_full_name() or self.user.username} ({self.get_role_display()})\"\n\n    @property\n    def is_admin(self):\n        return self.role == 'admin'\n\n    @property\n    def is_inspector(self):\n        return self.role == 'inspector'\n\n\nclass Report(models.Model):\n    REPORT_TYPES = [\n        ('full', 'Full Inspection Report'),\n        ('defects', 'Defects Summary'),\n        ('urgent', 'Urgent Items Only'),\n        ('compliance', 'Compliance Certificate'),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    layout = models.ForeignKey(WarehouseLayout, on_delete=models.CASCADE)\n    report_type = models.CharField(max_length=20, choices=REPORT_TYPES)\n    generated_by = models.ForeignKey(User, on_delete=models.CASCADE)\n    generated_at = models.DateTimeField(auto_now_add=True)\n    date_from = models.DateField()\n    date_to = models.DateField()\n    pdf_file = models.FileField(upload_to='reports/', blank=True)\n    include_layout = models.BooleanField(default=True)\n    include_photos = models.BooleanField(default=True)\n    include_inspector_details = models.BooleanField(default=False)\n\n    class Meta:\n        ordering = ['-generated_at']\n\n    def __str__(self):\n        return f\"{self.get_report_type_display()} - {self.generated_at.strftime('%Y-%m-%d %H:%M')}\"\n\n\nclass Notification(models.Model):\n    NOTIFICATION_TYPES = [\n        ('amber_reminder', 'Amber Defect Reminder'),\n        ('red_alert', 'Red Defect Alert'),\n        ('overdue', 'Overdue Item'),\n    ]\n    \n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    inspection = models.ForeignKey(Inspection, on_delete=models.CASCADE)\n    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES)\n    message = models.TextField()\n    is_read = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    sent_at = models.DateTimeField(null=True, blank=True)\n\n    class Meta:\n        ordering = ['-created_at']\n\n    def __str__(self):\n        return f\"{self.get_notification_type_display()} for {self.user.username}\"\n","size_bytes":7871},"core/urls.py":{"content":"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n    path('layout/', views.layout_editor, name='layout_editor'),\n    path('inspection/', views.inspection, name='inspection'),\n    path('reports/', views.reports, name='reports'),\n    path('users/', views.users, name='users'),\n    \n    # HTMX endpoints\n    path('api/save-layout/', views.save_layout, name='save_layout'),\n    path('api/create-inspection/', views.create_inspection, name='create_inspection'),\n    path('api/component/<str:component_id>/', views.get_component_data, name='get_component_data'),\n    \n    # CSV endpoints\n    path('api/export-layout/<uuid:layout_id>/', views.export_layout_csv, name='export_layout_csv'),\n    path('api/import-layout/', views.import_layout_csv, name='import_layout_csv'),\n]\n","size_bytes":833},"core/views.py":{"content":"from django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.models import User\nfrom django.http import JsonResponse, HttpResponse\nfrom django.views.decorators.http import require_http_methods\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.core.paginator import Paginator\nfrom django.db.models import Q, Count\nfrom django.contrib import messages\nfrom django.utils import timezone\nfrom datetime import datetime, timedelta\nimport json\n\nfrom .models import (\n    WarehouseLayout, WarehouseComponent, Inspection, UserProfile, \n    Report, Notification, ComponentStatus, SeverityLevel, DefectType\n)\nfrom .forms import InspectionForm, ComponentForm, ReportForm\n\n\n@login_required\ndef dashboard(request):\n    # Get statistics\n    total_components = WarehouseComponent.objects.count()\n    immediate_threats = WarehouseComponent.objects.filter(status=ComponentStatus.IMMEDIATE).count()\n    fix_4_weeks = WarehouseComponent.objects.filter(status=ComponentStatus.FIX_4_WEEKS).count()\n    monitor_only = WarehouseComponent.objects.filter(\n        status__in=[ComponentStatus.GOOD, ComponentStatus.MONITOR]\n    ).count()\n    \n    # Get urgent items\n    urgent_inspections = Inspection.objects.filter(\n        Q(severity=SeverityLevel.RED) | Q(severity=SeverityLevel.AMBER),\n        is_resolved=False\n    ).select_related('component', 'inspector').order_by('inspection_date')[:10]\n    \n    # Get recent activity\n    recent_activity = Inspection.objects.select_related(\n        'component', 'inspector'\n    ).order_by('-inspection_date')[:5]\n    \n    context = {\n        'total_components': total_components,\n        'immediate_threats': immediate_threats,\n        'fix_4_weeks': fix_4_weeks,\n        'monitor_only': monitor_only,\n        'urgent_inspections': urgent_inspections,\n        'recent_activity': recent_activity,\n    }\n    \n    if request.htmx:\n        return render(request, 'components/dashboard_content.html', context)\n    \n    return render(request, 'dashboard.html', context)\n\n\n@login_required\ndef layout_editor(request):\n    layouts = WarehouseLayout.objects.filter(is_active=True)\n    active_layout = layouts.first() if layouts.exists() else None\n    components = []\n    \n    if active_layout:\n        components = active_layout.components.all()\n    \n    context = {\n        'layouts': layouts,\n        'active_layout': active_layout,\n        'components': components,\n    }\n    \n    if request.htmx:\n        return render(request, 'components/layout_content.html', context)\n    \n    return render(request, 'layout_editor.html', context)\n\n\n@login_required\n@require_http_methods([\"POST\"])\ndef save_layout(request):\n    try:\n        data = json.loads(request.body)\n        layout_id = data.get('layout_id')\n        components_data = data.get('components', [])\n        \n        if layout_id:\n            layout = get_object_or_404(WarehouseLayout, id=layout_id)\n        else:\n            layout = WarehouseLayout.objects.create(\n                name=f\"Layout {timezone.now().strftime('%Y-%m-%d %H:%M')}\",\n                created_by=request.user\n            )\n        \n        # Clear existing components\n        layout.components.all().delete()\n        \n        # Create new components\n        for comp_data in components_data:\n            WarehouseComponent.objects.create(\n                id=comp_data['id'],\n                layout=layout,\n                component_type=comp_data['type'],\n                x_position=comp_data['x'],\n                y_position=comp_data['y'],\n                width=comp_data['width'],\n                height=comp_data['height'],\n                status=comp_data.get('status', ComponentStatus.GOOD)\n            )\n        \n        return JsonResponse({'success': True, 'layout_id': str(layout.id)})\n    \n    except Exception as e:\n        return JsonResponse({'success': False, 'error': str(e)})\n\n\n@login_required\ndef inspection(request):\n    layouts = WarehouseLayout.objects.filter(is_active=True)\n    active_layout = layouts.first() if layouts.exists() else None\n    components = []\n    recent_inspections = Inspection.objects.select_related('component', 'inspector').order_by('-inspection_date')[:10]\n    \n    if active_layout:\n        components = active_layout.components.all()\n    \n    context = {\n        'layouts': layouts,\n        'active_layout': active_layout,\n        'components': components,\n        'recent_inspections': recent_inspections,\n        'defect_types': DefectType.choices,\n        'severity_levels': SeverityLevel.choices,\n    }\n    \n    if request.htmx:\n        return render(request, 'components/inspection_content.html', context)\n    \n    return render(request, 'inspection.html', context)\n\n\n@login_required\n@require_http_methods([\"POST\"])\ndef create_inspection(request):\n    try:\n        component_id = request.POST.get('component_id')\n        defect_type = request.POST.get('defect_type')\n        custom_defect = request.POST.get('custom_defect', '')\n        severity = request.POST.get('severity')\n        notes = request.POST.get('notes', '')\n        \n        component = get_object_or_404(WarehouseComponent, id=component_id)\n        \n        inspection = Inspection.objects.create(\n            component=component,\n            inspector=request.user,\n            defect_type=defect_type,\n            custom_defect=custom_defect,\n            severity=severity,\n            notes=notes\n        )\n        \n        if request.htmx:\n            return render(request, 'components/inspection_success.html', {\n                'inspection': inspection\n            })\n        \n        messages.success(request, 'Inspection saved successfully.')\n        return redirect('inspection')\n    \n    except Exception as e:\n        if request.htmx:\n            return render(request, 'components/inspection_error.html', {\n                'error': str(e)\n            })\n        \n        messages.error(request, f'Error saving inspection: {str(e)}')\n        return redirect('inspection')\n\n\n@login_required\ndef reports(request):\n    if request.method == 'POST':\n        form = ReportForm(request.POST)\n        if form.is_valid():\n            report = form.save(commit=False)\n            report.generated_by = request.user\n            report.save()\n            # TODO: Generate PDF asynchronously\n            messages.success(request, 'Report generation started.')\n    else:\n        form = ReportForm()\n    \n    reports_list = Report.objects.select_related('layout', 'generated_by').order_by('-generated_at')\n    paginator = Paginator(reports_list, 10)\n    page_number = request.GET.get('page')\n    reports_page = paginator.get_page(page_number)\n    \n    context = {\n        'form': form,\n        'reports': reports_page,\n    }\n    \n    if request.htmx:\n        return render(request, 'components/reports_content.html', context)\n    \n    return render(request, 'reports.html', context)\n\n\n@login_required\ndef users(request):\n    # Check if user is admin\n    try:\n        profile = request.user.userprofile\n        if not profile.is_admin:\n            messages.error(request, 'Access denied. Admin privileges required.')\n            return redirect('dashboard')\n    except UserProfile.DoesNotExist:\n        messages.error(request, 'User profile not found.')\n        return redirect('dashboard')\n    \n    users_list = User.objects.select_related('userprofile').order_by('username')\n    paginator = Paginator(users_list, 10)\n    page_number = request.GET.get('page')\n    users_page = paginator.get_page(page_number)\n    \n    context = {\n        'users': users_page,\n    }\n    \n    if request.htmx:\n        return render(request, 'components/users_content.html', context)\n    \n    return render(request, 'users.html', context)\n\n\n@login_required\ndef get_component_data(request, component_id):\n    \"\"\"HTMX endpoint to get component data for inspection panel\"\"\"\n    component = get_object_or_404(WarehouseComponent, id=component_id)\n    latest_inspection = component.inspections.first()\n    \n    context = {\n        'component': component,\n        'latest_inspection': latest_inspection,\n        'defect_types': DefectType.choices,\n        'severity_levels': SeverityLevel.choices,\n    }\n    \n    return render(request, 'components/inspection_panel.html', context)\n\n\n@login_required\ndef export_layout_csv(request, layout_id):\n    \"\"\"Export warehouse layout as CSV\"\"\"\n    layout = get_object_or_404(WarehouseLayout, id=layout_id)\n    \n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = f'attachment; filename=\"{layout.name}_layout.csv\"'\n    \n    import csv\n    writer = csv.writer(response)\n    writer.writerow(['component_id', 'type', 'x', 'y', 'width', 'height', 'status'])\n    \n    for component in layout.components.all():\n        writer.writerow([\n            component.id,\n            component.component_type,\n            component.x_position,\n            component.y_position,\n            component.width,\n            component.height,\n            component.status\n        ])\n    \n    return response\n\n\n@login_required\n@require_http_methods([\"POST\"])\ndef import_layout_csv(request):\n    \"\"\"Import warehouse layout from CSV\"\"\"\n    if 'csv_file' not in request.FILES:\n        messages.error(request, 'No CSV file uploaded.')\n        return redirect('layout_editor')\n    \n    csv_file = request.FILES['csv_file']\n    \n    try:\n        import csv\n        import io\n        \n        # Create new layout\n        layout = WarehouseLayout.objects.create(\n            name=f\"Imported Layout {timezone.now().strftime('%Y-%m-%d %H:%M')}\",\n            created_by=request.user\n        )\n        \n        # Parse CSV\n        csv_data = csv_file.read().decode('utf-8')\n        csv_reader = csv.DictReader(io.StringIO(csv_data))\n        \n        for row in csv_reader:\n            WarehouseComponent.objects.create(\n                id=row['component_id'],\n                layout=layout,\n                component_type=row['type'],\n                x_position=float(row['x']),\n                y_position=float(row['y']),\n                width=float(row['width']),\n                height=float(row['height']),\n                status=row.get('status', ComponentStatus.GOOD)\n            )\n        \n        messages.success(request, f'Layout imported successfully as \"{layout.name}\"')\n        \n    except Exception as e:\n        messages.error(request, f'Error importing CSV: {str(e)}')\n    \n    return redirect('layout_editor')\n","size_bytes":10499},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedSampleData } from \"./seed-data\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, async () => {\n    log(`serving on port ${port}`);\n    \n    // Seed sample data for development\n    if (process.env.NODE_ENV === 'development') {\n      try {\n        await seedSampleData();\n      } catch (error) {\n        console.error(\"Failed to seed sample data:\", error);\n      }\n    }\n  });\n})();\n","size_bytes":2356},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Check for Replit domains (optional for development)\nconst replitDomains = process.env.REPLIT_DOMAINS || 'localhost:5000';\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'dev-session-secret-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  const userData = {\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  };\n  \n  console.log('Creating/updating user with claims:', claims);\n  const user = await storage.upsertUser(userData);\n  console.log('User created/updated:', user);\n  \n  // Create user profile if it doesn't exist\n  const existingProfile = await storage.getUserProfile(user.id);\n  if (!existingProfile) {\n    console.log('Creating user profile for:', user.id);\n    await storage.createUserProfile({\n      userId: user.id,\n      role: 'inspector',\n    });\n  }\n  \n  return user;\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    const dbUser = await upsertUser(tokens.claims());\n    // Store the database user ID in the session\n    (user as any).userId = dbUser.id;\n    verified(null, user);\n  };\n\n  for (const domain of replitDomains.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  // Development mode bypass for testing\n  if (process.env.NODE_ENV === 'development') {\n    // Create a mock user for development using the actual user from database\n    const existingUser = await storage.getUserByEmail('test@example.com');\n    if (existingUser) {\n      (req as any).user = {\n        claims: {\n          sub: existingUser.id,\n          email: existingUser.email,\n          first_name: existingUser.firstName,\n          last_name: existingUser.lastName,\n          profile_image_url: existingUser.profileImageUrl,\n        }\n      };\n      return next();\n    }\n  }\n\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5419},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\n\n// Set up multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n});\n\n// Validation schemas\nconst createLayoutSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n});\n\nconst createComponentSchema = z.object({\n  id: z.string().min(1),\n  layoutId: z.string().uuid(),\n  componentType: z.enum(['rack', 'beam', 'upright']),\n  xPosition: z.number(),\n  yPosition: z.number(),\n  width: z.number(),\n  height: z.number(),\n  status: z.enum(['good', 'monitor', 'fix_4_weeks', 'immediate']).optional(),\n});\n\nconst createInspectionSchema = z.object({\n  componentId: z.string().min(1),\n  defectType: z.enum(['bent_upright', 'damaged_beam', 'loose_connections', 'corrosion', 'missing_components', 'overloading', 'custom']),\n  customDefect: z.string().optional(),\n  severity: z.enum(['green', 'amber', 'red']),\n  notes: z.string().optional(),\n  dueDate: z.string().optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // Try to get user by stored database ID first, then fallback to claims\n      let userId = req.user.userId || req.user.claims.sub;\n      let user = await storage.getUser(userId);\n      \n      // If user not found by claims sub, try to find by email\n      if (!user && req.user.claims.email) {\n        console.log('User not found by ID, searching by email:', req.user.claims.email);\n        const users = await storage.getUserByEmail(req.user.claims.email);\n        if (users) {\n          user = users;\n          userId = user.id;\n        }\n      }\n      \n      if (!user) {\n        console.log('User not found, creating new user from claims:', req.user.claims);\n        // Create user if not found\n        user = await storage.upsertUser({\n          email: req.user.claims.email,\n          firstName: req.user.claims.first_name,\n          lastName: req.user.claims.last_name,\n          profileImageUrl: req.user.claims.profile_image_url,\n        });\n        \n        // Create default profile\n        await storage.createUserProfile({\n          userId: user.id,\n          role: 'inspector',\n        });\n        \n        userId = user.id;\n      }\n      \n      const profile = await storage.getUserProfile(userId);\n      res.json({ ...user, profile });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get('/api/dashboard/urgent-inspections', isAuthenticated, async (req, res) => {\n    try {\n      const urgentInspections = await storage.getUrgentInspections();\n      res.json(urgentInspections);\n    } catch (error) {\n      console.error(\"Error fetching urgent inspections:\", error);\n      res.status(500).json({ message: \"Failed to fetch urgent inspections\" });\n    }\n  });\n\n  app.get('/api/dashboard/recent-activity', isAuthenticated, async (req, res) => {\n    try {\n      const recentActivity = await storage.getRecentInspections(5);\n      res.json(recentActivity);\n    } catch (error) {\n      console.error(\"Error fetching recent activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  // Layout routes\n  app.get('/api/layouts', isAuthenticated, async (req, res) => {\n    try {\n      const layouts = await storage.getLayouts();\n      res.json(layouts);\n    } catch (error) {\n      console.error(\"Error fetching layouts:\", error);\n      res.status(500).json({ message: \"Failed to fetch layouts\" });\n    }\n  });\n\n  app.get('/api/layouts/:id', isAuthenticated, async (req, res) => {\n    try {\n      const layout = await storage.getLayout(req.params.id);\n      if (!layout) {\n        return res.status(404).json({ message: \"Layout not found\" });\n      }\n      res.json(layout);\n    } catch (error) {\n      console.error(\"Error fetching layout:\", error);\n      res.status(500).json({ message: \"Failed to fetch layout\" });\n    }\n  });\n\n  app.post('/api/layouts', isAuthenticated, async (req: any, res) => {\n    try {\n      const data = createLayoutSchema.parse(req.body);\n      const layout = await storage.createLayout({\n        ...data,\n        createdBy: req.user.claims.sub,\n      });\n      res.status(201).json(layout);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error creating layout:\", error);\n      res.status(500).json({ message: \"Failed to create layout\" });\n    }\n  });\n\n  // Component routes\n  app.get('/api/layouts/:layoutId/components', isAuthenticated, async (req, res) => {\n    try {\n      const layoutId = req.params.layoutId;\n      \n      // Handle 'default' case by getting the first available layout\n      let actualLayoutId = layoutId;\n      if (layoutId === 'default') {\n        const layouts = await storage.getLayouts();\n        if (layouts.length === 0) {\n          return res.json([]);\n        }\n        actualLayoutId = layouts[0].id;\n      }\n      \n      const components = await storage.getComponents(actualLayoutId);\n      res.json(components);\n    } catch (error) {\n      console.error(\"Error fetching components:\", error);\n      res.status(500).json({ message: \"Failed to fetch components\" });\n    }\n  });\n\n  app.post('/api/components', isAuthenticated, async (req, res) => {\n    try {\n      const data = createComponentSchema.parse(req.body);\n      const component = await storage.createComponent(data);\n      res.status(201).json(component);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error creating component:\", error);\n      res.status(500).json({ message: \"Failed to create component\" });\n    }\n  });\n\n  app.put('/api/components/:id', isAuthenticated, async (req, res) => {\n    try {\n      const updates = req.body;\n      const component = await storage.updateComponent(req.params.id, updates);\n      res.json(component);\n    } catch (error) {\n      console.error(\"Error updating component:\", error);\n      res.status(500).json({ message: \"Failed to update component\" });\n    }\n  });\n\n  app.delete('/api/components/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteComponent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting component:\", error);\n      res.status(500).json({ message: \"Failed to delete component\" });\n    }\n  });\n\n  // Bulk component operations\n  app.post('/api/layouts/:layoutId/components/bulk', isAuthenticated, async (req, res) => {\n    try {\n      const { components } = req.body;\n      \n      // Clear existing components\n      await storage.deleteComponentsByLayout(req.params.layoutId);\n      \n      // Create new components\n      const createdComponents = [];\n      for (const comp of components) {\n        const data = createComponentSchema.parse({\n          ...comp,\n          layoutId: req.params.layoutId,\n        });\n        const component = await storage.createComponent(data);\n        createdComponents.push(component);\n      }\n      \n      res.json(createdComponents);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error bulk creating components:\", error);\n      res.status(500).json({ message: \"Failed to bulk create components\" });\n    }\n  });\n\n  // Inspection routes\n  app.get('/api/inspections', isAuthenticated, async (req, res) => {\n    try {\n      const componentId = req.query.componentId as string;\n      const inspections = await storage.getInspections(componentId);\n      res.json(inspections);\n    } catch (error) {\n      console.error(\"Error fetching inspections:\", error);\n      res.status(500).json({ message: \"Failed to fetch inspections\" });\n    }\n  });\n\n  app.post('/api/inspections', isAuthenticated, async (req: any, res) => {\n    try {\n      const data = createInspectionSchema.parse(req.body);\n      \n      // Calculate due date for amber severity\n      let dueDate;\n      if (data.severity === 'amber' && !data.dueDate) {\n        const fourWeeksFromNow = new Date();\n        fourWeeksFromNow.setDate(fourWeeksFromNow.getDate() + 28);\n        dueDate = fourWeeksFromNow.toISOString().split('T')[0];\n      } else if (data.dueDate) {\n        dueDate = data.dueDate;\n      }\n      \n      const inspection = await storage.createInspection({\n        ...data,\n        inspectorId: req.user.claims.sub,\n        dueDate,\n      });\n      \n      res.status(201).json(inspection);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error creating inspection:\", error);\n      res.status(500).json({ message: \"Failed to create inspection\" });\n    }\n  });\n\n  // CSV export/import routes\n  app.get('/api/layouts/:layoutId/export-csv', isAuthenticated, async (req, res) => {\n    try {\n      const components = await storage.getComponents(req.params.layoutId);\n      const layout = await storage.getLayout(req.params.layoutId);\n      \n      if (!layout) {\n        return res.status(404).json({ message: \"Layout not found\" });\n      }\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${layout.name}_layout.csv\"`);\n      \n      // CSV header\n      let csv = 'component_id,type,x,y,width,height,status\\n';\n      \n      // CSV rows\n      for (const component of components) {\n        csv += `${component.id},${component.componentType},${component.xPosition},${component.yPosition},${component.width},${component.height},${component.status}\\n`;\n      }\n      \n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting CSV:\", error);\n      res.status(500).json({ message: \"Failed to export CSV\" });\n    }\n  });\n\n  app.post('/api/layouts/import-csv', isAuthenticated, upload.single('csvFile'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No CSV file uploaded\" });\n      }\n      \n      const fs = require('fs');\n      const csvData = fs.readFileSync(req.file.path, 'utf-8');\n      const lines = csvData.split('\\n');\n      const header = lines[0].split(',');\n      \n      // Create new layout\n      const layout = await storage.createLayout({\n        name: `Imported Layout ${new Date().toISOString().split('T')[0]}`,\n        createdBy: req.user.claims.sub,\n      });\n      \n      // Parse CSV rows\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n        \n        const values = line.split(',');\n        const component = {\n          id: values[0],\n          layoutId: layout.id,\n          componentType: values[1] as any,\n          xPosition: parseFloat(values[2]),\n          yPosition: parseFloat(values[3]),\n          width: parseFloat(values[4]),\n          height: parseFloat(values[5]),\n          status: (values[6] || 'good') as any,\n        };\n        \n        await storage.createComponent(component);\n      }\n      \n      // Clean up uploaded file\n      fs.unlinkSync(req.file.path);\n      \n      res.json({ message: \"Layout imported successfully\", layoutId: layout.id });\n    } catch (error) {\n      console.error(\"Error importing CSV:\", error);\n      res.status(500).json({ message: \"Failed to import CSV\" });\n    }\n  });\n\n  // Report routes\n  app.get('/api/reports', isAuthenticated, async (req, res) => {\n    try {\n      const reports = await storage.getReports();\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.post('/api/reports', isAuthenticated, async (req: any, res) => {\n    try {\n      const reportData = { ...req.body };\n      \n      // Handle empty layoutId case\n      if (!reportData.layoutId || reportData.layoutId === '') {\n        const layouts = await storage.getLayouts();\n        if (layouts.length > 0) {\n          reportData.layoutId = layouts[0].id;\n        } else {\n          return res.status(400).json({ message: \"No layouts available for report generation\" });\n        }\n      }\n      \n      const report = await storage.createReport({\n        ...reportData,\n        generatedBy: req.user.claims.sub,\n      });\n      \n      res.status(201).json(report);\n    } catch (error) {\n      console.error(\"Error creating report:\", error);\n      res.status(500).json({ message: \"Failed to create report\" });\n    }\n  });\n\n  // User management routes (admin only)\n  app.get('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const profile = await storage.getUserProfile(req.user.claims.sub);\n      if (!profile || profile.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      // TODO: Implement user listing\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.user.claims.sub);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14517},"server/seed-data.ts":{"content":"import { storage } from \"./storage\";\n\nexport async function seedSampleData() {\n  console.log(\"🌱 Starting to seed sample data...\");\n\n  try {\n    // Check if we already have layouts\n    const existingLayouts = await storage.getLayouts();\n    if (existingLayouts.length > 0) {\n      console.log(\"✅ Sample data already exists, skipping seed\");\n      return;\n    }\n\n    // Create a test user first for development if it doesn't exist\n    let testUser = await storage.getUserByEmail('test@example.com');\n    if (!testUser) {\n      testUser = await storage.upsertUser({\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'Inspector',\n      });\n      \n      // Create user profile\n      await storage.createUserProfile({\n        userId: testUser.id,\n        role: 'inspector',\n        certificationNumber: 'CERT-2024-001',\n      });\n      \n      console.log(\"✅ Created test user for development\");\n    }\n\n    // Create a sample warehouse layout\n    const sampleLayout = await storage.createLayout({\n      name: \"Main Warehouse - Zone A\",\n      description: \"Primary storage area with heavy-duty pallet racking systems\",\n      createdBy: testUser.id,\n    });\n\n    console.log(\"✅ Created sample layout:\", sampleLayout.name);\n\n    // Create sample components for the layout\n    const sampleComponents = [\n      {\n        id: \"RACK-001\",\n        layoutId: sampleLayout.id,\n        componentType: \"rack\" as const,\n        xPosition: 100,\n        yPosition: 100,\n        width: 200,\n        height: 300,\n        status: \"good\" as const,\n      },\n      {\n        id: \"RACK-002\", \n        layoutId: sampleLayout.id,\n        componentType: \"rack\" as const,\n        xPosition: 350,\n        yPosition: 100,\n        width: 200,\n        height: 300,\n        status: \"monitor\" as const,\n      },\n      {\n        id: \"BEAM-001\",\n        layoutId: sampleLayout.id,\n        componentType: \"beam\" as const,\n        xPosition: 100,\n        yPosition: 120,\n        width: 180,\n        height: 20,\n        status: \"good\" as const,\n      },\n      {\n        id: \"BEAM-002\",\n        layoutId: sampleLayout.id,\n        componentType: \"beam\" as const,\n        xPosition: 100,\n        yPosition: 180,\n        width: 180,\n        height: 20,\n        status: \"fix_4_weeks\" as const,\n      },\n      {\n        id: \"BEAM-003\",\n        layoutId: sampleLayout.id,\n        componentType: \"beam\" as const,\n        xPosition: 350,\n        yPosition: 120,\n        width: 180,\n        height: 20,\n        status: \"immediate\" as const,\n      },\n      {\n        id: \"UPRIGHT-001\",\n        layoutId: sampleLayout.id,\n        componentType: \"upright\" as const,\n        xPosition: 80,\n        yPosition: 90,\n        width: 20,\n        height: 320,\n        status: \"good\" as const,\n      },\n      {\n        id: \"UPRIGHT-002\",\n        layoutId: sampleLayout.id,\n        componentType: \"upright\" as const,\n        xPosition: 300,\n        yPosition: 90,\n        width: 20,\n        height: 320,\n        status: \"good\" as const,\n      },\n    ];\n\n    // Create components\n    for (const componentData of sampleComponents) {\n      await storage.createComponent(componentData);\n    }\n\n    console.log(`✅ Created ${sampleComponents.length} sample components`);\n\n    // Create sample inspection data\n    const sampleInspection = await storage.createInspection({\n      componentId: \"BEAM-002\",\n      inspectorId: testUser.id,\n      defectType: \"damaged_beam\",\n      severity: \"amber\",\n      notes: \"Minor damage to beam coating, requires monitoring and repair within 4 weeks\",\n    });\n\n    const urgentInspection = await storage.createInspection({\n      componentId: \"BEAM-003\", \n      inspectorId: testUser.id,\n      defectType: \"loose_connections\",\n      severity: \"red\",\n      notes: \"URGENT: Loose bolts detected, immediate repair required for safety\",\n    });\n\n    console.log(\"✅ Created sample inspection data\");\n    console.log(\"🎉 Sample data seeding completed successfully!\");\n\n  } catch (error) {\n    console.error(\"❌ Error seeding sample data:\", error);\n    throw error;\n  }\n}","size_bytes":4069},"server/storage.ts":{"content":"import {\n  users,\n  userProfiles,\n  warehouseLayouts,\n  warehouseComponents,\n  inspections,\n  inspectionPhotos,\n  reports,\n  notifications,\n  type User,\n  type UpsertUser,\n  type UserProfile,\n  type WarehouseLayout,\n  type WarehouseComponent,\n  type Inspection,\n  type Report,\n  type Notification,\n  type InsertUserProfile,\n  type InsertWarehouseLayout,\n  type InsertWarehouseComponent,\n  type InsertInspection,\n  type InsertReport,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, count, or } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // User profile operations\n  getUserProfile(userId: string): Promise<UserProfile | undefined>;\n  createUserProfile(profile: InsertUserProfile): Promise<UserProfile>;\n  updateUserProfile(userId: string, profile: Partial<InsertUserProfile>): Promise<UserProfile>;\n  \n  // Layout operations\n  getLayouts(): Promise<WarehouseLayout[]>;\n  getLayout(id: string): Promise<WarehouseLayout | undefined>;\n  createLayout(layout: InsertWarehouseLayout): Promise<WarehouseLayout>;\n  updateLayout(id: string, layout: Partial<InsertWarehouseLayout>): Promise<WarehouseLayout>;\n  deleteLayout(id: string): Promise<void>;\n  \n  // Component operations\n  getComponents(layoutId: string): Promise<WarehouseComponent[]>;\n  getComponent(id: string): Promise<WarehouseComponent | undefined>;\n  createComponent(component: InsertWarehouseComponent): Promise<WarehouseComponent>;\n  updateComponent(id: string, component: Partial<InsertWarehouseComponent>): Promise<WarehouseComponent>;\n  deleteComponent(id: string): Promise<void>;\n  deleteComponentsByLayout(layoutId: string): Promise<void>;\n  \n  // Inspection operations\n  getInspections(componentId?: string): Promise<Inspection[]>;\n  getInspection(id: string): Promise<Inspection | undefined>;\n  createInspection(inspection: InsertInspection): Promise<Inspection>;\n  updateInspection(id: string, inspection: Partial<InsertInspection>): Promise<Inspection>;\n  \n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    totalComponents: number;\n    immediateThreats: number;\n    fix4Weeks: number;\n    monitorOnly: number;\n  }>;\n  \n  getUrgentInspections(): Promise<Inspection[]>;\n  getRecentInspections(limit?: number): Promise<Inspection[]>;\n  \n  // Report operations\n  getReports(): Promise<Report[]>;\n  createReport(report: InsertReport): Promise<Report>;\n  \n  // Notification operations\n  getNotifications(userId: string): Promise<Notification[]>;\n  markNotificationRead(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // First try to find existing user by email\n    if (userData.email) {\n      const [existingUser] = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, userData.email));\n      \n      if (existingUser) {\n        // Update existing user\n        const [updatedUser] = await db\n          .update(users)\n          .set({\n            ...userData,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, existingUser.id))\n          .returning();\n        return updatedUser;\n      }\n    }\n    \n    // Create new user\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async getUserProfile(userId: string): Promise<UserProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(userProfiles)\n      .where(eq(userProfiles.userId, userId));\n    return profile;\n  }\n\n  async createUserProfile(profile: InsertUserProfile): Promise<UserProfile> {\n    const [newProfile] = await db\n      .insert(userProfiles)\n      .values(profile)\n      .returning();\n    return newProfile;\n  }\n\n  async updateUserProfile(userId: string, profile: Partial<InsertUserProfile>): Promise<UserProfile> {\n    const [updatedProfile] = await db\n      .update(userProfiles)\n      .set({ ...profile, updatedAt: new Date() })\n      .where(eq(userProfiles.userId, userId))\n      .returning();\n    return updatedProfile;\n  }\n\n  async getLayouts(): Promise<WarehouseLayout[]> {\n    return await db\n      .select()\n      .from(warehouseLayouts)\n      .where(eq(warehouseLayouts.isActive, true))\n      .orderBy(desc(warehouseLayouts.updatedAt));\n  }\n\n  async getLayout(id: string): Promise<WarehouseLayout | undefined> {\n    const [layout] = await db\n      .select()\n      .from(warehouseLayouts)\n      .where(eq(warehouseLayouts.id, id));\n    return layout;\n  }\n\n  async createLayout(layout: InsertWarehouseLayout): Promise<WarehouseLayout> {\n    const [newLayout] = await db\n      .insert(warehouseLayouts)\n      .values(layout)\n      .returning();\n    return newLayout;\n  }\n\n  async updateLayout(id: string, layout: Partial<InsertWarehouseLayout>): Promise<WarehouseLayout> {\n    const [updatedLayout] = await db\n      .update(warehouseLayouts)\n      .set({ ...layout, updatedAt: new Date() })\n      .where(eq(warehouseLayouts.id, id))\n      .returning();\n    return updatedLayout;\n  }\n\n  async deleteLayout(id: string): Promise<void> {\n    await db\n      .update(warehouseLayouts)\n      .set({ isActive: false })\n      .where(eq(warehouseLayouts.id, id));\n  }\n\n  async getComponents(layoutId: string): Promise<WarehouseComponent[]> {\n    return await db\n      .select()\n      .from(warehouseComponents)\n      .where(eq(warehouseComponents.layoutId, layoutId))\n      .orderBy(warehouseComponents.id);\n  }\n\n  async getComponent(id: string): Promise<WarehouseComponent | undefined> {\n    const [component] = await db\n      .select()\n      .from(warehouseComponents)\n      .where(eq(warehouseComponents.id, id));\n    return component;\n  }\n\n  async createComponent(component: InsertWarehouseComponent): Promise<WarehouseComponent> {\n    const [newComponent] = await db\n      .insert(warehouseComponents)\n      .values(component)\n      .returning();\n    return newComponent;\n  }\n\n  async updateComponent(id: string, component: Partial<InsertWarehouseComponent>): Promise<WarehouseComponent> {\n    // Remove updatedAt from the component data as it's auto-managed by the database\n    const { updatedAt, ...updateData } = component as any;\n    \n    const [updatedComponent] = await db\n      .update(warehouseComponents)\n      .set(updateData)\n      .where(eq(warehouseComponents.id, id))\n      .returning();\n    return updatedComponent;\n  }\n\n  async deleteComponent(id: string): Promise<void> {\n    await db\n      .delete(warehouseComponents)\n      .where(eq(warehouseComponents.id, id));\n  }\n\n  async deleteComponentsByLayout(layoutId: string): Promise<void> {\n    await db\n      .delete(warehouseComponents)\n      .where(eq(warehouseComponents.layoutId, layoutId));\n  }\n\n  async getInspections(componentId?: string): Promise<Inspection[]> {\n    const query = db\n      .select()\n      .from(inspections)\n      .orderBy(desc(inspections.inspectionDate));\n\n    if (componentId) {\n      return await query.where(eq(inspections.componentId, componentId));\n    }\n\n    return await query;\n  }\n\n  async getInspection(id: string): Promise<Inspection | undefined> {\n    const [inspection] = await db\n      .select()\n      .from(inspections)\n      .where(eq(inspections.id, id));\n    return inspection;\n  }\n\n  async createInspection(inspection: InsertInspection): Promise<Inspection> {\n    const [newInspection] = await db\n      .insert(inspections)\n      .values(inspection)\n      .returning();\n    \n    // Update component status based on severity\n    const statusMap = {\n      red: 'immediate',\n      amber: 'fix_4_weeks',\n      green: 'monitor'\n    } as const;\n    \n    await db\n      .update(warehouseComponents)\n      .set({ status: statusMap[inspection.severity] })\n      .where(eq(warehouseComponents.id, inspection.componentId));\n\n    return newInspection;\n  }\n\n  async updateInspection(id: string, inspection: Partial<InsertInspection>): Promise<Inspection> {\n    const [updatedInspection] = await db\n      .update(inspections)\n      .set(inspection)\n      .where(eq(inspections.id, id))\n      .returning();\n    return updatedInspection;\n  }\n\n  async getDashboardStats(): Promise<{\n    totalComponents: number;\n    immediateThreats: number;\n    fix4Weeks: number;\n    monitorOnly: number;\n  }> {\n    const [totalResult] = await db\n      .select({ count: count() })\n      .from(warehouseComponents);\n\n    const [immediateResult] = await db\n      .select({ count: count() })\n      .from(warehouseComponents)\n      .where(eq(warehouseComponents.status, 'immediate'));\n\n    const [fix4WeeksResult] = await db\n      .select({ count: count() })\n      .from(warehouseComponents)\n      .where(eq(warehouseComponents.status, 'fix_4_weeks'));\n\n    const [monitorResult] = await db\n      .select({ count: count() })\n      .from(warehouseComponents)\n      .where(or(\n        eq(warehouseComponents.status, 'good'),\n        eq(warehouseComponents.status, 'monitor')\n      ));\n\n    return {\n      totalComponents: totalResult.count,\n      immediateThreats: immediateResult.count,\n      fix4Weeks: fix4WeeksResult.count,\n      monitorOnly: monitorResult.count,\n    };\n  }\n\n  async getUrgentInspections(): Promise<Inspection[]> {\n    return await db\n      .select()\n      .from(inspections)\n      .where(\n        and(\n          or(\n            eq(inspections.severity, 'red'),\n            eq(inspections.severity, 'amber')\n          ),\n          eq(inspections.isResolved, false)\n        )\n      )\n      .orderBy(inspections.inspectionDate)\n      .limit(10);\n  }\n\n  async getRecentInspections(limit = 5): Promise<Inspection[]> {\n    return await db\n      .select()\n      .from(inspections)\n      .orderBy(desc(inspections.inspectionDate))\n      .limit(limit);\n  }\n\n  async getReports(): Promise<Report[]> {\n    return await db\n      .select()\n      .from(reports)\n      .orderBy(desc(reports.generatedAt));\n  }\n\n  async createReport(report: InsertReport): Promise<Report> {\n    const [newReport] = await db\n      .insert(reports)\n      .values(report)\n      .returning();\n    return newReport;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10981},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  real,\n  date,\n  uuid,\n  pgEnum\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User profiles for role management\nexport const roleEnum = pgEnum('role', ['inspector', 'admin']);\n\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  role: roleEnum(\"role\").notNull().default('inspector'),\n  phone: varchar(\"phone\"),\n  certificationNumber: varchar(\"certification_number\"),\n  certificationExpiry: date(\"certification_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Warehouse layouts\nexport const warehouseLayouts = pgTable(\"warehouse_layouts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Component types and statuses\nexport const componentTypeEnum = pgEnum('component_type', ['rack', 'beam', 'upright']);\nexport const componentStatusEnum = pgEnum('component_status', ['good', 'monitor', 'fix_4_weeks', 'immediate']);\n\nexport const warehouseComponents = pgTable(\"warehouse_components\", {\n  id: varchar(\"id\", { length: 50 }).primaryKey(),\n  layoutId: uuid(\"layout_id\").notNull().references(() => warehouseLayouts.id, { onDelete: 'cascade' }),\n  componentType: componentTypeEnum(\"component_type\").notNull(),\n  xPosition: real(\"x_position\").notNull(),\n  yPosition: real(\"y_position\").notNull(),\n  width: real(\"width\").notNull(),\n  height: real(\"height\").notNull(),\n  status: componentStatusEnum(\"status\").default('good'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Defect types and severity levels\nexport const defectTypeEnum = pgEnum('defect_type', [\n  'bent_upright', 'damaged_beam', 'loose_connections', 'corrosion', 'missing_components', 'overloading', 'custom'\n]);\nexport const severityLevelEnum = pgEnum('severity_level', ['green', 'amber', 'red']);\n\nexport const inspections = pgTable(\"inspections\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  componentId: varchar(\"component_id\", { length: 50 }).notNull().references(() => warehouseComponents.id, { onDelete: 'cascade' }),\n  inspectorId: varchar(\"inspector_id\").notNull().references(() => users.id),\n  defectType: defectTypeEnum(\"defect_type\").notNull(),\n  customDefect: varchar(\"custom_defect\", { length: 255 }),\n  severity: severityLevelEnum(\"severity\").notNull(),\n  notes: text(\"notes\"),\n  inspectionDate: timestamp(\"inspection_date\").defaultNow(),\n  dueDate: date(\"due_date\"),\n  isResolved: boolean(\"is_resolved\").default(false),\n  resolvedDate: timestamp(\"resolved_date\"),\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n});\n\n// Inspection photos\nexport const inspectionPhotos = pgTable(\"inspection_photos\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inspectionId: uuid(\"inspection_id\").notNull().references(() => inspections.id, { onDelete: 'cascade' }),\n  imageUrl: varchar(\"image_url\").notNull(),\n  caption: varchar(\"caption\", { length: 255 }),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\n// Reports\nexport const reportTypeEnum = pgEnum('report_type', ['full', 'defects', 'urgent', 'compliance']);\n\nexport const reports = pgTable(\"reports\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  layoutId: uuid(\"layout_id\").notNull().references(() => warehouseLayouts.id),\n  reportType: reportTypeEnum(\"report_type\").notNull(),\n  generatedBy: varchar(\"generated_by\").notNull().references(() => users.id),\n  generatedAt: timestamp(\"generated_at\").defaultNow(),\n  dateFrom: date(\"date_from\").notNull(),\n  dateTo: date(\"date_to\").notNull(),\n  pdfUrl: varchar(\"pdf_url\"),\n  includeLayout: boolean(\"include_layout\").default(true),\n  includePhotos: boolean(\"include_photos\").default(true),\n  includeInspectorDetails: boolean(\"include_inspector_details\").default(false),\n});\n\n// Notifications\nexport const notificationTypeEnum = pgEnum('notification_type', ['amber_reminder', 'red_alert', 'overdue']);\n\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  inspectionId: uuid(\"inspection_id\").notNull().references(() => inspections.id),\n  notificationType: notificationTypeEnum(\"notification_type\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  sentAt: timestamp(\"sent_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  profile: one(userProfiles, {\n    fields: [users.id],\n    references: [userProfiles.userId],\n  }),\n  createdLayouts: many(warehouseLayouts),\n  inspections: many(inspections),\n  notifications: many(notifications),\n  reports: many(reports),\n}));\n\nexport const userProfilesRelations = relations(userProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [userProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const warehouseLayoutsRelations = relations(warehouseLayouts, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [warehouseLayouts.createdBy],\n    references: [users.id],\n  }),\n  components: many(warehouseComponents),\n  reports: many(reports),\n}));\n\nexport const warehouseComponentsRelations = relations(warehouseComponents, ({ one, many }) => ({\n  layout: one(warehouseLayouts, {\n    fields: [warehouseComponents.layoutId],\n    references: [warehouseLayouts.id],\n  }),\n  inspections: many(inspections),\n}));\n\nexport const inspectionsRelations = relations(inspections, ({ one, many }) => ({\n  component: one(warehouseComponents, {\n    fields: [inspections.componentId],\n    references: [warehouseComponents.id],\n  }),\n  inspector: one(users, {\n    fields: [inspections.inspectorId],\n    references: [users.id],\n  }),\n  resolvedBy: one(users, {\n    fields: [inspections.resolvedBy],\n    references: [users.id],\n  }),\n  photos: many(inspectionPhotos),\n  notifications: many(notifications),\n}));\n\nexport const inspectionPhotosRelations = relations(inspectionPhotos, ({ one }) => ({\n  inspection: one(inspections, {\n    fields: [inspectionPhotos.inspectionId],\n    references: [inspections.id],\n  }),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  layout: one(warehouseLayouts, {\n    fields: [reports.layoutId],\n    references: [warehouseLayouts.id],\n  }),\n  generatedBy: one(users, {\n    fields: [reports.generatedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  inspection: one(inspections, {\n    fields: [notifications.inspectionId],\n    references: [inspections.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWarehouseLayoutSchema = createInsertSchema(warehouseLayouts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWarehouseComponentSchema = createInsertSchema(warehouseComponents).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInspectionSchema = createInsertSchema(inspections).omit({\n  id: true,\n  inspectionDate: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  generatedAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type WarehouseLayout = typeof warehouseLayouts.$inferSelect;\nexport type WarehouseComponent = typeof warehouseComponents.$inferSelect;\nexport type Inspection = typeof inspections.$inferSelect;\nexport type InspectionPhoto = typeof inspectionPhotos.$inferSelect;\nexport type Report = typeof reports.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\n\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type InsertWarehouseLayout = z.infer<typeof insertWarehouseLayoutSchema>;\nexport type InsertWarehouseComponent = z.infer<typeof insertWarehouseComponentSchema>;\nexport type InsertInspection = z.infer<typeof insertInspectionSchema>;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\n\n// Enums for frontend use\nexport const ComponentType = {\n  RACK: 'rack' as const,\n  BEAM: 'beam' as const,\n  UPRIGHT: 'upright' as const,\n} as const;\n\nexport const ComponentStatus = {\n  GOOD: 'good' as const,\n  MONITOR: 'monitor' as const,\n  FIX_4_WEEKS: 'fix_4_weeks' as const,\n  IMMEDIATE: 'immediate' as const,\n} as const;\n\nexport const DefectType = {\n  BENT_UPRIGHT: 'bent_upright' as const,\n  DAMAGED_BEAM: 'damaged_beam' as const,\n  LOOSE_CONNECTIONS: 'loose_connections' as const,\n  CORROSION: 'corrosion' as const,\n  MISSING_COMPONENTS: 'missing_components' as const,\n  OVERLOADING: 'overloading' as const,\n  CUSTOM: 'custom' as const,\n} as const;\n\nexport const SeverityLevel = {\n  GREEN: 'green' as const,\n  AMBER: 'amber' as const,\n  RED: 'red' as const,\n} as const;\n\nexport const UserRole = {\n  INSPECTOR: 'inspector' as const,\n  ADMIN: 'admin' as const,\n} as const;\n","size_bytes":10673},"warehouse_inspection/__init__.py":{"content":"","size_bytes":0},"warehouse_inspection/asgi.py":{"content":"\"\"\"\nASGI config for warehouse_inspection project.\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'warehouse_inspection.settings')\n\napplication = get_asgi_application()\n","size_bytes":236},"warehouse_inspection/settings.py":{"content":"\"\"\"\nDjango settings for warehouse_inspection project.\n\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom decouple import config\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me-in-production')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\n\nALLOWED_HOSTS = ['*']\n\n# Application definition\nDJANGO_APPS = [\n    'unfold',\n    'unfold.contrib.filters',\n    'unfold.contrib.forms',\n    'unfold.contrib.import_export',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n]\n\nTHIRD_PARTY_APPS = [\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n    'django_htmx',\n    'django_vite',\n    'import_export',\n]\n\nLOCAL_APPS = [\n    'core',\n]\n\nINSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django_htmx.middleware.HtmxMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n]\n\nROOT_URLCONF = 'warehouse_inspection.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'warehouse_inspection.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('PGDATABASE', default='warehouse_inspection'),\n        'USER': config('PGUSER', default='postgres'),\n        'PASSWORD': config('PGPASSWORD', default=''),\n        'HOST': config('PGHOST', default='localhost'),\n        'PORT': config('PGPORT', default='5432'),\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Django Allauth\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\n\nSITE_ID = 1\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\n\n# Django Vite\nDJANGO_VITE_ASSETS_PATH = BASE_DIR / 'static' / 'dist'\nDJANGO_VITE_DEV_MODE = DEBUG\n\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n\n# Celery Configuration\nCELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')\n\n# Django Unfold Admin\nUNFOLD = {\n    \"SITE_TITLE\": \"Warehouse Inspection Admin\",\n    \"SITE_HEADER\": \"Warehouse Inspection System\",\n    \"SITE_URL\": \"/\",\n    \"SITE_ICON\": {\n        \"light\": lambda request: static(\"icon-light.svg\"),\n        \"dark\": lambda request: static(\"icon-dark.svg\"),\n    },\n    \"COLORS\": {\n        \"primary\": {\n            \"50\": \"250 245 255\",\n            \"100\": \"243 232 255\",\n            \"200\": \"233 213 255\",\n            \"300\": \"216 180 254\",\n            \"400\": \"196 141 253\",\n            \"500\": \"168 85 247\",\n            \"600\": \"147 51 234\",\n            \"700\": \"126 34 206\",\n            \"800\": \"107 33 168\",\n            \"900\": \"88 28 135\",\n            \"950\": \"59 7 100\",\n        },\n    },\n}\n\n# Security settings for production\nif not DEBUG:\n    SECURE_SSL_REDIRECT = True\n    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n    SECURE_BROWSER_XSS_FILTER = True\n    SECURE_CONTENT_TYPE_NOSNIFF = True\n    X_FRAME_OPTIONS = 'DENY'\n    SECURE_HSTS_SECONDS = 31536000\n    SECURE_HSTS_INCLUDE_SUBDOMAINS = True\n    SECURE_HSTS_PRELOAD = True\n","size_bytes":5431},"warehouse_inspection/urls.py":{"content":"\"\"\"\nURL configuration for warehouse_inspection project.\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('allauth.urls')),\n    path('', include('core.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n","size_bytes":448},"warehouse_inspection/wsgi.py":{"content":"\"\"\"\nWSGI config for warehouse_inspection project.\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'warehouse_inspection.settings')\n\napplication = get_wsgi_application()\n","size_bytes":236},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport LayoutEditor from \"@/pages/layout-editor\";\nimport Inspection from \"@/pages/inspection\";\nimport Reports from \"@/pages/reports\";\nimport Users from \"@/pages/users\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/layout-editor\" component={LayoutEditor} />\n          <Route path=\"/inspection\" component={Inspection} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/users\" component={Users} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1391},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"core/management/__init__.py":{"content":"","size_bytes":0},"core/templatetags/__init__.py":{"content":"","size_bytes":0},"core/templatetags/core_tags.py":{"content":"from django import template\nfrom core.models import Inspection, SeverityLevel\n\nregister = template.Library()\n\n@register.simple_tag\ndef urgent_items_count():\n    \"\"\"Return count of urgent inspection items (red and amber severity).\"\"\"\n    return Inspection.objects.filter(\n        severity__in=[SeverityLevel.RED, SeverityLevel.AMBER],\n        is_resolved=False\n    ).count()\n\n@register.filter\ndef get_item(dictionary, key):\n    \"\"\"Get item from dictionary by key.\"\"\"\n    return dictionary.get(key)\n\n@register.filter\ndef multiply(value, arg):\n    \"\"\"Multiply value by argument.\"\"\"\n    try:\n        return float(value) * float(arg)\n    except (ValueError, TypeError):\n        return 0\n\n@register.filter\ndef severity_color(severity):\n    \"\"\"Return CSS color class for severity level.\"\"\"\n    color_map = {\n        'red': 'text-danger',\n        'amber': 'text-warning',\n        'green': 'text-success'\n    }\n    return color_map.get(severity, 'text-neutral-500')\n\n@register.filter\ndef status_color(status):\n    \"\"\"Return CSS color class for component status.\"\"\"\n    color_map = {\n        'good': 'text-success',\n        'monitor': 'text-success',\n        'fix_4_weeks': 'text-warning',\n        'immediate': 'text-danger'\n    }\n    return color_map.get(status, 'text-neutral-500')\n\n@register.filter\ndef format_defect_type(defect_type):\n    \"\"\"Format defect type for display.\"\"\"\n    if defect_type == 'custom':\n        return 'Custom'\n    \n    return defect_type.replace('_', ' ').title()\n\n@register.filter\ndef component_type_display(component_type):\n    \"\"\"Format component type for display.\"\"\"\n    type_map = {\n        'rack': 'Rack',\n        'beam': 'Beam', \n        'upright': 'Upright'\n    }\n    return type_map.get(component_type, component_type.title())\n","size_bytes":1753},"static/css/main.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n:root {\n    --primary: #1565C0;\n    --secondary: #37474F;\n    --success: #2E7D32;\n    --warning: #F57F17;\n    --danger: #C62828;\n    --neutral-50: #FAFAFA;\n    --neutral-100: #F5F5F5;\n    --neutral-200: #E0E0E0;\n    --neutral-600: #616161;\n    --neutral-900: #212121;\n    --font-inter: 'Inter', system-ui, sans-serif;\n}\n\nbody {\n    font-family: var(--font-inter);\n}\n\n/* Custom color utilities */\n.text-primary { color: var(--primary) !important; }\n.text-secondary { color: var(--secondary) !important; }\n.text-success { color: var(--success) !important; }\n.text-warning { color: var(--warning) !important; }\n.text-danger { color: var(--danger) !important; }\n.text-neutral-50 { color: var(--neutral-50) !important; }\n.text-neutral-100 { color: var(--neutral-100) !important; }\n.text-neutral-200 { color: var(--neutral-200) !important; }\n.text-neutral-600 { color: var(--neutral-600) !important; }\n.text-neutral-900 { color: var(--neutral-900) !important; }\n\n.bg-primary { background-color: var(--primary) !important; }\n.bg-secondary { background-color: var(--secondary) !important; }\n.bg-success { background-color: var(--success) !important; }\n.bg-warning { background-color: var(--warning) !important; }\n.bg-danger { background-color: var(--danger) !important; }\n.bg-neutral-50 { background-color: var(--neutral-50) !important; }\n.bg-neutral-100 { background-color: var(--neutral-100) !important; }\n.bg-neutral-200 { background-color: var(--neutral-200) !important; }\n\n.border-primary { border-color: var(--primary) !important; }\n.border-secondary { border-color: var(--secondary) !important; }\n.border-success { border-color: var(--success) !important; }\n.border-warning { border-color: var(--warning) !important; }\n.border-danger { border-color: var(--danger) !important; }\n.border-neutral-200 { border-color: var(--neutral-200) !important; }\n\n.hover\\:bg-primary\\/90:hover { background-color: rgba(21, 101, 192, 0.9) !important; }\n.hover\\:bg-secondary\\/90:hover { background-color: rgba(55, 71, 79, 0.9) !important; }\n.hover\\:bg-success\\/90:hover { background-color: rgba(46, 125, 50, 0.9) !important; }\n.hover\\:bg-warning\\/90:hover { background-color: rgba(245, 127, 23, 0.9) !important; }\n.hover\\:bg-danger\\/90:hover { background-color: rgba(198, 40, 40, 0.9) !important; }\n\n.bg-primary\\/10 { background-color: rgba(21, 101, 192, 0.1) !important; }\n.bg-secondary\\/10 { background-color: rgba(55, 71, 79, 0.1) !important; }\n.bg-success\\/10 { background-color: rgba(46, 125, 50, 0.1) !important; }\n.bg-warning\\/10 { background-color: rgba(245, 127, 23, 0.1) !important; }\n.bg-danger\\/10 { background-color: rgba(198, 40, 40, 0.1) !important; }\n\n.bg-primary\\/20 { background-color: rgba(21, 101, 192, 0.2) !important; }\n.bg-warning\\/20 { background-color: rgba(245, 127, 23, 0.2) !important; }\n.bg-danger\\/20 { background-color: rgba(198, 40, 40, 0.2) !important; }\n.bg-success\\/20 { background-color: rgba(46, 125, 50, 0.2) !important; }\n\n.hover\\:bg-primary\\/30:hover { background-color: rgba(21, 101, 192, 0.3) !important; }\n.hover\\:bg-warning\\/30:hover { background-color: rgba(245, 127, 23, 0.3) !important; }\n.hover\\:bg-danger\\/30:hover { background-color: rgba(198, 40, 40, 0.3) !important; }\n.hover\\:bg-success\\/30:hover { background-color: rgba(46, 125, 50, 0.3) !important; }\n\n.focus\\:ring-primary:focus { --tw-ring-color: var(--primary) !important; }\n.focus\\:ring-success:focus { --tw-ring-color: var(--success) !important; }\n.focus\\:ring-warning:focus { --tw-ring-color: var(--warning) !important; }\n.focus\\:ring-danger:focus { --tw-ring-color: var(--danger) !important; }\n\n.focus\\:border-primary:focus { border-color: var(--primary) !important; }\n\n/* Grid pattern for canvas backgrounds */\n.grid-pattern {\n    background-image: \n        repeating-linear-gradient(0deg, #f9f9f9, #f9f9f9 20px, transparent 20px, transparent 40px),\n        repeating-linear-gradient(90deg, #f9f9f9, #f9f9f9 20px, transparent 20px, transparent 40px);\n}\n\n/* Animation utilities */\n.transition-colors {\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;\n}\n\n.transition-all {\n    transition: all 0.3s ease-in-out;\n}\n\n/* Form styling */\n.form-input {\n    @apply w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary;\n}\n\n.form-select {\n    @apply w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary;\n}\n\n.form-textarea {\n    @apply w-full px-3 py-2 border border-neutral-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary;\n}\n\n.form-checkbox {\n    @apply text-primary focus:ring-primary;\n}\n\n.form-radio {\n    @apply text-primary focus:ring-primary;\n}\n\n/* Component status colors */\n.status-good {\n    @apply bg-success text-white;\n}\n\n.status-monitor {\n    @apply bg-success text-white;\n}\n\n.status-fix_4_weeks {\n    @apply bg-warning text-white;\n}\n\n.status-immediate {\n    @apply bg-danger text-white;\n}\n\n/* Canvas container styling */\n.canvas-container {\n    background: repeating-linear-gradient(0deg, #f9f9f9, #f9f9f9 20px, transparent 20px, transparent 40px),\n                repeating-linear-gradient(90deg, #f9f9f9, #f9f9f9 20px, transparent 20px, transparent 40px);\n}\n\n/* Loading state */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.loading::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 20px;\n    height: 20px;\n    border: 2px solid #f3f3f3;\n    border-top: 2px solid var(--primary);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: translate(-50%, -50%) rotate(0deg); }\n    100% { transform: translate(-50%, -50%) rotate(360deg); }\n}\n\n/* HTMX loading indicator */\n.htmx-indicator {\n    opacity: 0;\n    transition: opacity 200ms ease-in;\n}\n\n.htmx-request .htmx-indicator {\n    opacity: 1;\n}\n\n.htmx-request.htmx-indicator {\n    opacity: 1;\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n}\n\n/* Print styles */\n@media print {\n    .no-print {\n        display: none !important;\n    }\n}\n\n/* Utility classes for common patterns */\n.shadow-card {\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n.shadow-elevated {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n    .mobile-hidden {\n        display: none;\n    }\n    \n    .sidebar-collapsed {\n        width: 0px !important;\n    }\n    \n    .sidebar-collapsed .sidebar-content {\n        display: none;\n    }\n}\n","size_bytes":7015},"static/js/alpine-extensions.js":{"content":"// Alpine.js extensions and utilities for the Warehouse Inspection System\n\n// Global state management\ndocument.addEventListener('alpine:init', () => {\n    Alpine.store('app', {\n        sidebarOpen: window.innerWidth >= 1024,\n        currentView: 'dashboard',\n        selectedComponent: null,\n        notifications: [],\n        \n        toggleSidebar() {\n            this.sidebarOpen = !this.sidebarOpen;\n        },\n        \n        setCurrentView(view) {\n            this.currentView = view;\n        },\n        \n        selectComponent(component) {\n            this.selectedComponent = component;\n        },\n        \n        addNotification(notification) {\n            this.notifications.unshift({\n                id: Date.now(),\n                ...notification,\n                timestamp: new Date()\n            });\n            \n            // Auto-remove after 5 seconds\n            setTimeout(() => {\n                this.removeNotification(notification.id || Date.now());\n            }, 5000);\n        },\n        \n        removeNotification(id) {\n            this.notifications = this.notifications.filter(n => n.id !== id);\n        }\n    });\n});\n\n// Modal management\nAlpine.data('modal', () => ({\n    isOpen: false,\n    \n    open() {\n        this.isOpen = true;\n        document.body.style.overflow = 'hidden';\n    },\n    \n    close() {\n        this.isOpen = false;\n        document.body.style.overflow = 'auto';\n    },\n    \n    toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n}));\n\n// Form validation\nAlpine.data('form', (initialData = {}) => ({\n    data: { ...initialData },\n    errors: {},\n    isSubmitting: false,\n    \n    validate() {\n        this.errors = {};\n        let isValid = true;\n        \n        // Basic validation rules\n        Object.keys(this.data).forEach(key => {\n            const value = this.data[key];\n            \n            if (key.includes('email') && value && !/\\S+@\\S+\\.\\S+/.test(value)) {\n                this.errors[key] = 'Please enter a valid email address';\n                isValid = false;\n            }\n            \n            if (key.includes('required') && !value) {\n                this.errors[key] = 'This field is required';\n                isValid = false;\n            }\n        });\n        \n        return isValid;\n    },\n    \n    async submit(url, method = 'POST') {\n        if (!this.validate()) return;\n        \n        this.isSubmitting = true;\n        \n        try {\n            const response = await fetch(url, {\n                method,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value\n                },\n                body: JSON.stringify(this.data)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const result = await response.json();\n            Alpine.store('app').addNotification({\n                type: 'success',\n                message: 'Operation completed successfully'\n            });\n            \n            return result;\n        } catch (error) {\n            Alpine.store('app').addNotification({\n                type: 'error',\n                message: error.message || 'An error occurred'\n            });\n            throw error;\n        } finally {\n            this.isSubmitting = false;\n        }\n    }\n}));\n\n// Dropdown management\nAlpine.data('dropdown', () => ({\n    isOpen: false,\n    \n    toggle() {\n        this.isOpen = !this.isOpen;\n    },\n    \n    close() {\n        this.isOpen = false;\n    }\n}));\n\n// Table management\nAlpine.data('table', (initialData = []) => ({\n    data: initialData,\n    selectedItems: [],\n    sortField: '',\n    sortDirection: 'asc',\n    searchQuery: '',\n    \n    get filteredData() {\n        let filtered = [...this.data];\n        \n        if (this.searchQuery) {\n            filtered = filtered.filter(item => \n                Object.values(item).some(value => \n                    String(value).toLowerCase().includes(this.searchQuery.toLowerCase())\n                )\n            );\n        }\n        \n        if (this.sortField) {\n            filtered.sort((a, b) => {\n                const aVal = a[this.sortField];\n                const bVal = b[this.sortField];\n                \n                if (this.sortDirection === 'asc') {\n                    return aVal > bVal ? 1 : -1;\n                } else {\n                    return aVal < bVal ? 1 : -1;\n                }\n            });\n        }\n        \n        return filtered;\n    },\n    \n    sort(field) {\n        if (this.sortField === field) {\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.sortField = field;\n            this.sortDirection = 'asc';\n        }\n    },\n    \n    toggleSelection(item) {\n        const index = this.selectedItems.findIndex(selected => selected.id === item.id);\n        if (index > -1) {\n            this.selectedItems.splice(index, 1);\n        } else {\n            this.selectedItems.push(item);\n        }\n    },\n    \n    selectAll() {\n        this.selectedItems = [...this.filteredData];\n    },\n    \n    deselectAll() {\n        this.selectedItems = [];\n    }\n}));\n\n// Toast notifications\nAlpine.data('toastManager', () => ({\n    toasts: [],\n    \n    add(toast) {\n        const id = Date.now();\n        this.toasts.push({\n            id,\n            type: 'info',\n            duration: 5000,\n            ...toast\n        });\n        \n        setTimeout(() => this.remove(id), toast.duration || 5000);\n    },\n    \n    remove(id) {\n        this.toasts = this.toasts.filter(toast => toast.id !== id);\n    }\n}));\n\n// Utility functions\nwindow.warehouseUtils = {\n    // Format dates consistently\n    formatDate(date, format = 'short') {\n        const d = new Date(date);\n        const options = {\n            short: { year: 'numeric', month: 'short', day: 'numeric' },\n            long: { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }\n        };\n        return d.toLocaleDateString('en-US', options[format]);\n    },\n    \n    // Debounce function calls\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    },\n    \n    // Generate unique IDs\n    generateId(prefix = 'id') {\n        return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    },\n    \n    // Get severity color classes\n    getSeverityColor(severity) {\n        const colors = {\n            'red': 'bg-danger text-white',\n            'amber': 'bg-warning text-white',\n            'green': 'bg-success text-white',\n            'immediate': 'bg-danger text-white',\n            'fix_4_weeks': 'bg-warning text-white',\n            'monitor': 'bg-success text-white',\n            'good': 'bg-success text-white'\n        };\n        return colors[severity] || 'bg-neutral-500 text-white';\n    },\n    \n    // Format component type display\n    formatComponentType(type) {\n        const types = {\n            'rack': 'Rack',\n            'beam': 'Beam',\n            'upright': 'Upright'\n        };\n        return types[type] || type;\n    },\n    \n    // Format defect type display\n    formatDefectType(type) {\n        return type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n};\n\n// HTMX integration enhancements\ndocument.addEventListener('htmx:afterRequest', function(event) {\n    // Handle HTMX responses\n    if (event.detail.xhr.status >= 400) {\n        Alpine.store('app').addNotification({\n            type: 'error',\n            message: 'An error occurred while processing your request'\n        });\n    }\n});\n\ndocument.addEventListener('htmx:beforeSend', function(event) {\n    // Show loading state\n    const target = event.target;\n    if (target) {\n        target.style.opacity = '0.6';\n        target.style.pointerEvents = 'none';\n    }\n});\n\ndocument.addEventListener('htmx:afterSettle', function(event) {\n    // Hide loading state\n    const target = event.target;\n    if (target) {\n        target.style.opacity = '1';\n        target.style.pointerEvents = 'auto';\n    }\n});\n\n// Keyboard shortcuts\ndocument.addEventListener('keydown', function(event) {\n    // Global shortcuts\n    if (event.ctrlKey || event.metaKey) {\n        switch (event.key) {\n            case 's':\n                event.preventDefault();\n                // Trigger save action if available\n                const saveBtn = document.querySelector('[data-action=\"save\"]');\n                if (saveBtn) saveBtn.click();\n                break;\n            case 'n':\n                event.preventDefault();\n                // Trigger new action if available\n                const newBtn = document.querySelector('[data-action=\"new\"]');\n                if (newBtn) newBtn.click();\n                break;\n        }\n    }\n    \n    // Escape key closes modals\n    if (event.key === 'Escape') {\n        const openModal = document.querySelector('[x-show=\"isOpen\"]:not([style*=\"display: none\"])');\n        if (openModal) {\n            // Find and trigger close action\n            const closeBtn = openModal.querySelector('[data-action=\"close\"]');\n            if (closeBtn) closeBtn.click();\n        }\n    }\n});\n\n// Initialize responsive behavior\nfunction handleResize() {\n    if (window.innerWidth < 768) {\n        Alpine.store('app').sidebarOpen = false;\n    } else if (window.innerWidth >= 1024) {\n        Alpine.store('app').sidebarOpen = true;\n    }\n}\n\nwindow.addEventListener('resize', warehouseUtils.debounce(handleResize, 250));\nhandleResize(); // Initial check\n\nconsole.log('Alpine.js extensions loaded for Warehouse Inspection System');\n","size_bytes":9940},"static/js/inspection.js":{"content":"// Inspection workflow JavaScript\nclass InspectionManager {\n    constructor() {\n        this.selectedComponent = null;\n        this.canvas = null;\n        this.stage = null;\n        this.layer = null;\n        this.components = new Map();\n        \n        this.init();\n        this.setupEventListeners();\n    }\n    \n    init() {\n        const canvasContainer = document.getElementById('inspection-canvas');\n        if (canvasContainer) {\n            this.initCanvas(canvasContainer);\n        }\n        \n        this.loadComponents();\n    }\n    \n    initCanvas(container) {\n        this.stage = new Konva.Stage({\n            container: 'inspection-canvas',\n            width: container.offsetWidth,\n            height: 500,\n            draggable: false\n        });\n        \n        this.layer = new Konva.Layer();\n        this.stage.add(this.layer);\n        \n        // Handle window resize\n        window.addEventListener('resize', () => {\n            if (container) {\n                this.stage.width(container.offsetWidth);\n                this.stage.draw();\n            }\n        });\n    }\n    \n    loadComponents() {\n        // This would typically load from backend\n        const sampleComponents = [\n            { id: 'A1', type: 'rack', x: 50, y: 50, width: 80, height: 60, status: 'good' },\n            { id: 'A2', type: 'rack', x: 150, y: 50, width: 80, height: 60, status: 'fix_4_weeks' },\n            { id: 'A3', type: 'rack', x: 250, y: 50, width: 80, height: 60, status: 'immediate' },\n            { id: 'B1', type: 'rack', x: 50, y: 130, width: 80, height: 60, status: 'good' },\n            { id: 'B2', type: 'rack', x: 150, y: 130, width: 80, height: 60, status: 'good' },\n            { id: 'B3', type: 'rack', x: 250, y: 130, width: 80, height: 60, status: 'fix_4_weeks' }\n        ];\n        \n        sampleComponents.forEach(component => {\n            this.addComponentToCanvas(component);\n        });\n    }\n    \n    addComponentToCanvas(componentData) {\n        const { id, type, x, y, width, height, status } = componentData;\n        \n        const group = new Konva.Group({\n            x: x,\n            y: y,\n            id: id\n        });\n        \n        const rect = new Konva.Rect({\n            width: width,\n            height: height,\n            fill: this.getStatusColor(status),\n            stroke: this.getStatusBorderColor(status),\n            strokeWidth: 2,\n            cornerRadius: 4\n        });\n        \n        const text = new Konva.Text({\n            x: 5,\n            y: height / 2 - 8,\n            text: id,\n            fontSize: 12,\n            fontFamily: 'Arial',\n            fill: '#000',\n            width: width - 10,\n            align: 'center'\n        });\n        \n        // Status indicator\n        const statusIcon = this.getStatusIcon(status);\n        if (statusIcon) {\n            const iconText = new Konva.Text({\n                x: width - 20,\n                y: 5,\n                text: statusIcon,\n                fontSize: 14,\n                fontFamily: 'Arial',\n                fill: this.getStatusBorderColor(status)\n            });\n            group.add(iconText);\n        }\n        \n        group.add(rect);\n        group.add(text);\n        \n        // Add click handler for inspection\n        group.on('click tap', () => {\n            this.selectComponentForInspection(componentData);\n        });\n        \n        group.on('mouseenter', () => {\n            document.body.style.cursor = 'pointer';\n            rect.stroke('#007bff');\n            rect.strokeWidth(3);\n            this.layer.draw();\n        });\n        \n        group.on('mouseleave', () => {\n            document.body.style.cursor = 'default';\n            rect.stroke(this.getStatusBorderColor(status));\n            rect.strokeWidth(2);\n            this.layer.draw();\n        });\n        \n        this.layer.add(group);\n        this.components.set(id, { group, data: componentData });\n        this.layer.draw();\n    }\n    \n    selectComponentForInspection(componentData) {\n        this.selectedComponent = componentData;\n        this.showInspectionPanel(componentData);\n        this.highlightSelectedComponent(componentData.id);\n    }\n    \n    highlightSelectedComponent(id) {\n        // Reset all components\n        this.components.forEach((component) => {\n            const rect = component.group.findOne('Rect');\n            rect.stroke(this.getStatusBorderColor(component.data.status));\n            rect.strokeWidth(2);\n        });\n        \n        // Highlight selected component\n        const selectedComponent = this.components.get(id);\n        if (selectedComponent) {\n            const rect = selectedComponent.group.findOne('Rect');\n            rect.stroke('#007bff');\n            rect.strokeWidth(4);\n        }\n        \n        this.layer.draw();\n    }\n    \n    showInspectionPanel(componentData) {\n        const noSelection = document.getElementById('no-selection');\n        const inspectionForm = document.getElementById('inspection-form');\n        \n        if (noSelection) noSelection.style.display = 'none';\n        if (inspectionForm) {\n            inspectionForm.style.display = 'block';\n            document.getElementById('selected-component').value = componentData.id;\n        }\n    }\n    \n    hideInspectionPanel() {\n        const noSelection = document.getElementById('no-selection');\n        const inspectionForm = document.getElementById('inspection-form');\n        \n        if (noSelection) noSelection.style.display = 'block';\n        if (inspectionForm) inspectionForm.style.display = 'none';\n        \n        this.selectedComponent = null;\n        \n        // Reset component highlighting\n        this.components.forEach((component) => {\n            const rect = component.group.findOne('Rect');\n            rect.stroke(this.getStatusBorderColor(component.data.status));\n            rect.strokeWidth(2);\n        });\n        this.layer.draw();\n    }\n    \n    submitInspection(formData) {\n        if (!this.selectedComponent) return;\n        \n        // Update component status based on inspection severity\n        const severity = formData.get('severity');\n        let newStatus = 'good';\n        \n        if (severity === 'red') {\n            newStatus = 'immediate';\n        } else if (severity === 'amber') {\n            newStatus = 'fix_4_weeks';\n        } else if (severity === 'green') {\n            newStatus = 'monitor';\n        }\n        \n        // Update component visually\n        this.updateComponentStatus(this.selectedComponent.id, newStatus);\n        \n        // Hide inspection panel\n        this.hideInspectionPanel();\n        \n        // Show success message\n        this.showSuccessMessage('Inspection saved successfully');\n    }\n    \n    updateComponentStatus(id, status) {\n        const component = this.components.get(id);\n        if (component) {\n            component.data.status = status;\n            const rect = component.group.findOne('Rect');\n            rect.fill(this.getStatusColor(status));\n            rect.stroke(this.getStatusBorderColor(status));\n            \n            // Update status icon\n            const existingIcon = component.group.findOne('.status-icon');\n            if (existingIcon) {\n                existingIcon.destroy();\n            }\n            \n            const statusIcon = this.getStatusIcon(status);\n            if (statusIcon) {\n                const iconText = new Konva.Text({\n                    x: component.data.width - 20,\n                    y: 5,\n                    text: statusIcon,\n                    fontSize: 14,\n                    fontFamily: 'Arial',\n                    fill: this.getStatusBorderColor(status),\n                    name: 'status-icon'\n                });\n                component.group.add(iconText);\n            }\n            \n            this.layer.draw();\n        }\n    }\n    \n    getStatusColor(status) {\n        const colors = {\n            'good': '#e8f5e8',\n            'monitor': '#e8f5e8',\n            'fix_4_weeks': '#fff3cd',\n            'immediate': '#f8d7da'\n        };\n        return colors[status] || '#f8f9fa';\n    }\n    \n    getStatusBorderColor(status) {\n        const colors = {\n            'good': '#28a745',\n            'monitor': '#28a745',\n            'fix_4_weeks': '#ffc107',\n            'immediate': '#dc3545'\n        };\n        return colors[status] || '#6c757d';\n    }\n    \n    getStatusIcon(status) {\n        const icons = {\n            'good': '✓',\n            'monitor': '✓',\n            'fix_4_weeks': '⚠',\n            'immediate': '🚨'\n        };\n        return icons[status];\n    }\n    \n    showSuccessMessage(message) {\n        const resultDiv = document.getElementById('inspection-result');\n        if (resultDiv) {\n            resultDiv.innerHTML = `\n                <div class=\"bg-success/10 border border-success rounded-lg p-4 mb-4\">\n                    <div class=\"flex items-center\">\n                        <i class=\"fas fa-check-circle text-success mr-2\"></i>\n                        <p class=\"text-success font-medium\">${message}</p>\n                    </div>\n                </div>\n            `;\n            \n            // Auto-hide after 3 seconds\n            setTimeout(() => {\n                if (resultDiv) resultDiv.innerHTML = '';\n            }, 3000);\n        }\n    }\n    \n    showErrorMessage(message) {\n        const resultDiv = document.getElementById('inspection-result');\n        if (resultDiv) {\n            resultDiv.innerHTML = `\n                <div class=\"bg-danger/10 border border-danger rounded-lg p-4 mb-4\">\n                    <div class=\"flex items-center\">\n                        <i class=\"fas fa-exclamation-circle text-danger mr-2\"></i>\n                        <p class=\"text-danger font-medium\">${message}</p>\n                    </div>\n                </div>\n            `;\n        }\n    }\n    \n    setupEventListeners() {\n        // Defect type change handler\n        const defectTypeSelect = document.querySelector('select[name=\"defect_type\"]');\n        if (defectTypeSelect) {\n            defectTypeSelect.addEventListener('change', (e) => {\n                const customField = document.getElementById('custom-defect-field');\n                const customInput = customField?.querySelector('input');\n                \n                if (e.target.value === 'custom') {\n                    if (customField) customField.style.display = 'block';\n                    if (customInput) customInput.required = true;\n                } else {\n                    if (customField) customField.style.display = 'none';\n                    if (customInput) customInput.required = false;\n                }\n            });\n        }\n        \n        // Form submission handler\n        const inspectionForm = document.getElementById('inspection-form');\n        if (inspectionForm) {\n            inspectionForm.addEventListener('htmx:afterRequest', (e) => {\n                if (e.detail.xhr.status === 200) {\n                    this.submitInspection(new FormData(inspectionForm));\n                } else {\n                    this.showErrorMessage('Failed to save inspection');\n                }\n            });\n        }\n        \n        // Click outside canvas to deselect\n        document.addEventListener('click', (e) => {\n            if (!e.target.closest('#inspection-canvas') && \n                !e.target.closest('#inspection-panel')) {\n                this.hideInspectionPanel();\n            }\n        });\n        \n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.hideInspectionPanel();\n            }\n        });\n    }\n}\n\n// Severity level helper functions\nwindow.inspectionUtils = {\n    getSeverityColor(severity) {\n        const colors = {\n            'red': 'text-danger',\n            'amber': 'text-warning',\n            'green': 'text-success'\n        };\n        return colors[severity] || 'text-neutral-500';\n    },\n    \n    getSeverityLabel(severity) {\n        const labels = {\n            'red': 'Immediate threat - Fix now',\n            'amber': 'Fix within 4 weeks',\n            'green': 'Monitor - No immediate action required'\n        };\n        return labels[severity] || severity;\n    },\n    \n    formatDefectType(type) {\n        if (type === 'custom') return 'Custom defect';\n        \n        const types = {\n            'bent_upright': 'Bent upright',\n            'damaged_beam': 'Damaged beam',\n            'loose_connections': 'Loose connections',\n            'corrosion': 'Corrosion/rust',\n            'missing_components': 'Missing components',\n            'overloading': 'Overloading'\n        };\n        \n        return types[type] || type.replace(/_/g, ' ');\n    }\n};\n\n// Initialize inspection manager when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (document.getElementById('inspection-canvas')) {\n        window.inspectionManager = new InspectionManager();\n    }\n});\n\nconsole.log('Inspection Manager loaded');\n","size_bytes":13002},"static/js/layout-editor.js":{"content":"// Layout Editor with Konva.js integration\nclass WarehouseLayoutEditor {\n    constructor(containerId) {\n        this.containerId = containerId;\n        this.stage = null;\n        this.layer = null;\n        this.components = new Map();\n        this.selectedComponent = null;\n        this.isEditing = false;\n        this.scale = 1;\n        this.gridSize = 20;\n        \n        this.init();\n        this.setupEventListeners();\n    }\n    \n    init() {\n        const container = document.getElementById(this.containerId);\n        if (!container) {\n            console.error('Canvas container not found');\n            return;\n        }\n        \n        // Initialize Konva stage\n        this.stage = new Konva.Stage({\n            container: this.containerId,\n            width: container.offsetWidth,\n            height: 600,\n            draggable: false\n        });\n        \n        // Create main layer\n        this.layer = new Konva.Layer();\n        this.stage.add(this.layer);\n        \n        // Draw grid\n        this.drawGrid();\n        \n        // Handle window resize\n        window.addEventListener('resize', () => {\n            const container = document.getElementById(this.containerId);\n            if (container) {\n                this.stage.width(container.offsetWidth);\n                this.stage.draw();\n            }\n        });\n    }\n    \n    drawGrid() {\n        const width = this.stage.width();\n        const height = this.stage.height();\n        \n        // Vertical lines\n        for (let i = 0; i < width / this.gridSize; i++) {\n            const line = new Konva.Line({\n                points: [i * this.gridSize, 0, i * this.gridSize, height],\n                stroke: '#f0f0f0',\n                strokeWidth: 1,\n                listening: false\n            });\n            this.layer.add(line);\n        }\n        \n        // Horizontal lines\n        for (let i = 0; i < height / this.gridSize; i++) {\n            const line = new Konva.Line({\n                points: [0, i * this.gridSize, width, i * this.gridSize],\n                stroke: '#f0f0f0',\n                strokeWidth: 1,\n                listening: false\n            });\n            this.layer.add(line);\n        }\n    }\n    \n    addComponent(componentData) {\n        const { id, componentType, xPosition, yPosition, width, height, status } = componentData;\n        \n        // Create component group\n        const group = new Konva.Group({\n            x: xPosition,\n            y: yPosition,\n            draggable: true,\n            id: id\n        });\n        \n        // Main rectangle\n        const rect = new Konva.Rect({\n            width: width,\n            height: height,\n            fill: this.getStatusColor(status),\n            stroke: this.getStatusBorderColor(status),\n            strokeWidth: 2,\n            cornerRadius: 4\n        });\n        \n        // Component label\n        const text = new Konva.Text({\n            x: 5,\n            y: height / 2 - 8,\n            text: id,\n            fontSize: 12,\n            fontFamily: 'Arial',\n            fill: '#000',\n            width: width - 10,\n            align: 'center'\n        });\n        \n        // Type indicator\n        const typeIcon = new Konva.Text({\n            x: 5,\n            y: 5,\n            text: this.getTypeIcon(componentType),\n            fontSize: 10,\n            fontFamily: 'Arial',\n            fill: '#666'\n        });\n        \n        group.add(rect);\n        group.add(text);\n        group.add(typeIcon);\n        \n        // Add event listeners\n        group.on('click tap', () => {\n            this.selectComponent(group, componentData);\n        });\n        \n        group.on('dragmove', () => {\n            this.snapToGrid(group);\n            this.updateComponentPosition(id, group.x(), group.y());\n        });\n        \n        group.on('dragend', () => {\n            this.saveComponentPosition(id, group.x(), group.y());\n        });\n        \n        group.on('mouseenter', () => {\n            document.body.style.cursor = 'move';\n            rect.stroke('#000');\n            rect.strokeWidth(3);\n            this.layer.draw();\n        });\n        \n        group.on('mouseleave', () => {\n            document.body.style.cursor = 'default';\n            if (this.selectedComponent !== group) {\n                rect.stroke(this.getStatusBorderColor(status));\n                rect.strokeWidth(2);\n                this.layer.draw();\n            }\n        });\n        \n        this.layer.add(group);\n        this.components.set(id, { group, data: componentData });\n        this.layer.draw();\n        \n        return group;\n    }\n    \n    removeComponent(id) {\n        const component = this.components.get(id);\n        if (component) {\n            component.group.destroy();\n            this.components.delete(id);\n            this.layer.draw();\n            \n            if (this.selectedComponent && this.selectedComponent.id() === id) {\n                this.deselectComponent();\n            }\n        }\n    }\n    \n    selectComponent(group, data) {\n        // Deselect previous component\n        this.deselectComponent();\n        \n        // Select new component\n        this.selectedComponent = group;\n        const rect = group.findOne('Rect');\n        rect.stroke('#007bff');\n        rect.strokeWidth(3);\n        this.layer.draw();\n        \n        // Show properties panel\n        this.showPropertiesPanel(data);\n    }\n    \n    deselectComponent() {\n        if (this.selectedComponent) {\n            const rect = this.selectedComponent.findOne('Rect');\n            const id = this.selectedComponent.id();\n            const component = this.components.get(id);\n            \n            if (component && rect) {\n                rect.stroke(this.getStatusBorderColor(component.data.status));\n                rect.strokeWidth(2);\n            }\n            \n            this.selectedComponent = null;\n            this.hidePropertiesPanel();\n            this.layer.draw();\n        }\n    }\n    \n    updateComponent(id, updates) {\n        const component = this.components.get(id);\n        if (!component) return;\n        \n        // Update data\n        component.data = { ...component.data, ...updates };\n        \n        // Update visual representation\n        const group = component.group;\n        const rect = group.findOne('Rect');\n        const text = group.findOne('Text');\n        \n        if (updates.status) {\n            rect.fill(this.getStatusColor(updates.status));\n            rect.stroke(this.getStatusBorderColor(updates.status));\n        }\n        \n        if (updates.id && updates.id !== id) {\n            text.text(updates.id);\n            group.id(updates.id);\n            \n            // Update component map\n            this.components.delete(id);\n            this.components.set(updates.id, component);\n        }\n        \n        this.layer.draw();\n    }\n    \n    snapToGrid(node) {\n        const x = Math.round(node.x() / this.gridSize) * this.gridSize;\n        const y = Math.round(node.y() / this.gridSize) * this.gridSize;\n        node.x(x);\n        node.y(y);\n    }\n    \n    getStatusColor(status) {\n        const colors = {\n            'good': '#e8f5e8',\n            'monitor': '#e8f5e8',\n            'fix_4_weeks': '#fff3cd',\n            'immediate': '#f8d7da'\n        };\n        return colors[status] || '#f8f9fa';\n    }\n    \n    getStatusBorderColor(status) {\n        const colors = {\n            'good': '#28a745',\n            'monitor': '#28a745',\n            'fix_4_weeks': '#ffc107',\n            'immediate': '#dc3545'\n        };\n        return colors[status] || '#6c757d';\n    }\n    \n    getTypeIcon(type) {\n        const icons = {\n            'rack': '⬜',\n            'beam': '━',\n            'upright': '┃'\n        };\n        return icons[type] || '■';\n    }\n    \n    showPropertiesPanel(data) {\n        const panel = document.getElementById('properties-panel');\n        if (panel) {\n            panel.style.display = 'block';\n            \n            // Populate form fields\n            document.getElementById('component-id').value = data.id;\n            document.getElementById('component-type').value = data.componentType;\n            document.getElementById('component-status').value = data.status;\n        }\n    }\n    \n    hidePropertiesPanel() {\n        const panel = document.getElementById('properties-panel');\n        if (panel) {\n            panel.style.display = 'none';\n        }\n    }\n    \n    updateComponentPosition(id, x, y) {\n        const component = this.components.get(id);\n        if (component) {\n            component.data.xPosition = x;\n            component.data.yPosition = y;\n        }\n    }\n    \n    saveComponentPosition(id, x, y) {\n        // This would typically save to backend via HTMX\n        console.log(`Saving component ${id} position: ${x}, ${y}`);\n    }\n    \n    loadComponents(componentsData) {\n        // Clear existing components\n        this.clearComponents();\n        \n        // Add new components\n        componentsData.forEach(component => {\n            this.addComponent(component);\n        });\n    }\n    \n    clearComponents() {\n        this.components.forEach((component) => {\n            component.group.destroy();\n        });\n        this.components.clear();\n        this.selectedComponent = null;\n        this.layer.draw();\n    }\n    \n    exportLayout() {\n        const layoutData = Array.from(this.components.values()).map(component => ({\n            ...component.data,\n            xPosition: component.group.x(),\n            yPosition: component.group.y()\n        }));\n        \n        return layoutData;\n    }\n    \n    zoomIn() {\n        this.scale = Math.min(this.scale * 1.1, 2);\n        this.stage.scale({ x: this.scale, y: this.scale });\n        this.stage.draw();\n        this.updateZoomDisplay();\n    }\n    \n    zoomOut() {\n        this.scale = Math.max(this.scale * 0.9, 0.5);\n        this.stage.scale({ x: this.scale, y: this.scale });\n        this.stage.draw();\n        this.updateZoomDisplay();\n    }\n    \n    resetZoom() {\n        this.scale = 1;\n        this.stage.scale({ x: 1, y: 1 });\n        this.stage.draw();\n        this.updateZoomDisplay();\n    }\n    \n    updateZoomDisplay() {\n        const zoomElement = document.getElementById('zoom-level');\n        if (zoomElement) {\n            zoomElement.textContent = Math.round(this.scale * 100) + '%';\n        }\n    }\n    \n    setupEventListeners() {\n        // Zoom controls\n        document.getElementById('zoom-in-btn')?.addEventListener('click', () => {\n            this.zoomIn();\n        });\n        \n        document.getElementById('zoom-out-btn')?.addEventListener('click', () => {\n            this.zoomOut();\n        });\n        \n        // Add component buttons\n        document.getElementById('add-rack-btn')?.addEventListener('click', () => {\n            this.addNewComponent('rack');\n        });\n        \n        document.getElementById('add-beam-btn')?.addEventListener('click', () => {\n            this.addNewComponent('beam');\n        });\n        \n        // Component form\n        document.getElementById('component-form')?.addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.updateSelectedComponent();\n        });\n        \n        document.getElementById('delete-component-btn')?.addEventListener('click', () => {\n            this.deleteSelectedComponent();\n        });\n        \n        // Save layout\n        document.getElementById('save-layout-btn')?.addEventListener('click', () => {\n            this.saveLayout();\n        });\n        \n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Delete' && this.selectedComponent) {\n                this.deleteSelectedComponent();\n            }\n            \n            if (e.key === 'Escape') {\n                this.deselectComponent();\n            }\n        });\n        \n        // Click outside to deselect\n        this.stage.on('click tap', (e) => {\n            if (e.target === this.stage) {\n                this.deselectComponent();\n            }\n        });\n    }\n    \n    addNewComponent(type) {\n        const id = `${type.toUpperCase()}-${Date.now()}`;\n        const newComponent = {\n            id: id,\n            componentType: type,\n            xPosition: 50,\n            yPosition: 50,\n            width: type === 'beam' ? 100 : 80,\n            height: type === 'upright' ? 100 : 60,\n            status: 'good'\n        };\n        \n        this.addComponent(newComponent);\n    }\n    \n    updateSelectedComponent() {\n        if (!this.selectedComponent) return;\n        \n        const id = this.selectedComponent.id();\n        const newId = document.getElementById('component-id').value;\n        const type = document.getElementById('component-type').value;\n        const status = document.getElementById('component-status').value;\n        \n        this.updateComponent(id, {\n            id: newId,\n            componentType: type,\n            status: status\n        });\n    }\n    \n    deleteSelectedComponent() {\n        if (this.selectedComponent) {\n            const id = this.selectedComponent.id();\n            this.removeComponent(id);\n        }\n    }\n    \n    saveLayout() {\n        const layoutData = this.exportLayout();\n        \n        // Send to backend via HTMX\n        htmx.ajax('POST', '/api/save-layout/', {\n            values: {\n                layout_id: this.getCurrentLayoutId(),\n                components: JSON.stringify(layoutData)\n            },\n            headers: {\n                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value\n            }\n        });\n    }\n    \n    getCurrentLayoutId() {\n        // Get current layout ID from the page context\n        return document.querySelector('[data-layout-id]')?.dataset.layoutId || null;\n    }\n}\n\n// Initialize layout editor when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (document.getElementById('canvas-container')) {\n        window.layoutEditor = new WarehouseLayoutEditor('canvas-container');\n        \n        // Load existing components if available\n        const componentsData = window.initialComponents || [];\n        if (componentsData.length > 0) {\n            window.layoutEditor.loadComponents(componentsData);\n        }\n    }\n});\n\nconsole.log('Layout Editor loaded');\n","size_bytes":14325},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/hooks/useUrgentItems.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"./useAuth\";\n\ninterface UrgentItem {\n  id: string;\n  componentId: string;\n  severity: 'red' | 'amber';\n  isOverdue: boolean;\n}\n\nexport function useUrgentItems() {\n  const { isAuthenticated } = useAuth();\n\n  const { data: urgentItems = [] } = useQuery<UrgentItem[]>({\n    queryKey: [\"/api/dashboard/urgent-inspections\"],\n    enabled: isAuthenticated,\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const urgentCount = urgentItems.length;\n  const overdueCount = urgentItems.filter(item => item.isOverdue).length;\n  const immediateCount = urgentItems.filter(item => item.severity === 'red').length;\n\n  return {\n    urgentItems,\n    urgentCount,\n    overdueCount,\n    immediateCount,\n  };\n}\n","size_bytes":779},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface DashboardStats {\n  totalComponents: number;\n  immediateThreats: number;\n  fix4Weeks: number;\n  monitorOnly: number;\n}\n\ninterface UrgentInspection {\n  id: string;\n  componentId: string;\n  defectType: string;\n  customDefect?: string;\n  severity: 'red' | 'amber' | 'green';\n  dueDate?: string;\n  isOverdue: boolean;\n}\n\ninterface RecentActivity {\n  id: string;\n  componentId: string;\n  defectType: string;\n  customDefect?: string;\n  severity: 'red' | 'amber' | 'green';\n  inspectorName: string;\n  inspectionDate: string;\n}\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: isAuthenticated,\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  });\n\n  const { data: urgentInspections, isLoading: urgentLoading } = useQuery<UrgentInspection[]>({\n    queryKey: [\"/api/dashboard/urgent-inspections\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: recentActivity, isLoading: activityLoading } = useQuery<RecentActivity[]>({\n    queryKey: [\"/api/dashboard/recent-activity\"],\n    enabled: isAuthenticated,\n  });\n\n  if (!isAuthenticated) return null;\n\n  const getSeverityBadge = (severity: string) => {\n    const variants = {\n      red: \"destructive\",\n      amber: \"secondary\", \n      green: \"default\"\n    } as const;\n    \n    const labels = {\n      red: \"Immediate\",\n      amber: \"4 Weeks\",\n      green: \"Monitor\"\n    } as const;\n\n    return (\n      <Badge variant={variants[severity as keyof typeof variants]} data-testid={`badge-severity-${severity}`}>\n        {labels[severity as keyof typeof labels]}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"flex pt-16\">\n        <Sidebar currentPage=\"dashboard\" />\n        \n        <main className=\"flex-1 ml-16 lg:ml-64 transition-all duration-300\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-page-title\">\n                Dashboard Overview\n              </h2>\n              <p className=\"text-gray-600\" data-testid=\"text-page-description\">\n                Monitor warehouse inspection status and urgent items\n              </p>\n            </div>\n\n            {/* Status Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card data-testid=\"card-immediate-threats\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"p-3 bg-red-100 rounded-lg\">\n                      <svg className=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                      </svg>\n                    </div>\n                    {statsLoading ? (\n                      <Skeleton className=\"h-8 w-8\" />\n                    ) : (\n                      <span className=\"text-2xl font-bold text-red-600\" data-testid=\"text-immediate-count\">\n                        {stats?.immediateThreats || 0}\n                      </span>\n                    )}\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Immediate Threats</h3>\n                  <p className=\"text-sm text-gray-600\">Fix now</p>\n                </CardContent>\n              </Card>\n              \n              <Card data-testid=\"card-fix-4-weeks\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                      <svg className=\"w-6 h-6 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                      </svg>\n                    </div>\n                    {statsLoading ? (\n                      <Skeleton className=\"h-8 w-8\" />\n                    ) : (\n                      <span className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-amber-count\">\n                        {stats?.fix4Weeks || 0}\n                      </span>\n                    )}\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Fix Within 4 Weeks</h3>\n                  <p className=\"text-sm text-gray-600\">Amber status</p>\n                </CardContent>\n              </Card>\n              \n              <Card data-testid=\"card-monitor-only\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"p-3 bg-green-100 rounded-lg\">\n                      <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                      </svg>\n                    </div>\n                    {statsLoading ? (\n                      <Skeleton className=\"h-8 w-8\" />\n                    ) : (\n                      <span className=\"text-2xl font-bold text-green-600\" data-testid=\"text-green-count\">\n                        {stats?.monitorOnly || 0}\n                      </span>\n                    )}\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Monitor Only</h3>\n                  <p className=\"text-sm text-gray-600\">Green status</p>\n                </CardContent>\n              </Card>\n              \n              <Card data-testid=\"card-total-components\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"p-3 bg-blue-100 rounded-lg\">\n                      <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                      </svg>\n                    </div>\n                    {statsLoading ? (\n                      <Skeleton className=\"h-8 w-8\" />\n                    ) : (\n                      <span className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-count\">\n                        {stats?.totalComponents || 0}\n                      </span>\n                    )}\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-1\">Total Components</h3>\n                  <p className=\"text-sm text-gray-600\">Last inspected</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Urgent Items Table */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle data-testid=\"text-urgent-items-title\">Urgent Items Requiring Attention</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\" data-testid=\"table-urgent-items\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Component ID</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Defect</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Severity</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Due Date</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {urgentLoading ? (\n                        Array.from({ length: 3 }).map((_, i) => (\n                          <tr key={i}>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-20\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-32\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-6 w-16\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-24\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-16\" /></td>\n                          </tr>\n                        ))\n                      ) : urgentInspections?.length ? (\n                        urgentInspections.map((inspection) => (\n                          <tr key={inspection.id} className=\"border-b\" data-testid={`row-urgent-${inspection.componentId}`}>\n                            <td className=\"py-3 px-4 font-medium\" data-testid={`text-component-id-${inspection.componentId}`}>\n                              {inspection.componentId}\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-defect-${inspection.componentId}`}>\n                              {inspection.defectType === 'custom' ? inspection.customDefect : inspection.defectType.replace('_', ' ')}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {getSeverityBadge(inspection.severity)}\n                            </td>\n                            <td className={`py-3 px-4 ${inspection.isOverdue ? 'text-red-600 font-medium' : ''}`} data-testid={`text-due-date-${inspection.componentId}`}>\n                              {inspection.isOverdue ? 'Overdue' : inspection.dueDate || '-'}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <button className=\"text-blue-600 hover:text-blue-800 font-medium\" data-testid={`link-view-details-${inspection.componentId}`}>\n                                View Details\n                              </button>\n                            </td>\n                          </tr>\n                        ))\n                      ) : (\n                        <tr>\n                          <td colSpan={5} className=\"py-8 text-center text-gray-500\" data-testid=\"text-no-urgent-items\">\n                            No urgent items found\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-recent-activity-title\">Recent Inspection Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"list-recent-activity\">\n                  {activityLoading ? (\n                    Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"flex items-start space-x-3\">\n                        <Skeleton className=\"w-2 h-2 rounded-full mt-2\" />\n                        <div className=\"flex-1\">\n                          <Skeleton className=\"h-4 w-48 mb-1\" />\n                          <Skeleton className=\"h-3 w-32\" />\n                        </div>\n                      </div>\n                    ))\n                  ) : recentActivity?.length ? (\n                    recentActivity.map((activity) => (\n                      <div key={activity.id} className=\"flex items-start space-x-3\" data-testid={`item-activity-${activity.componentId}`}>\n                        <div className={`w-2 h-2 rounded-full mt-2 ${\n                          activity.severity === 'red' ? 'bg-red-500' :\n                          activity.severity === 'amber' ? 'bg-yellow-500' : 'bg-green-500'\n                        }`} />\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\" data-testid={`text-activity-description-${activity.componentId}`}>\n                            {activity.componentId} - {activity.defectType === 'custom' ? activity.customDefect : activity.defectType.replace('_', ' ')}\n                          </p>\n                          <p className=\"text-xs text-gray-500\" data-testid={`text-activity-meta-${activity.componentId}`}>\n                            Inspector: {activity.inspectorName} • {new Date(activity.inspectionDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-gray-500\" data-testid=\"text-no-recent-activity\">\n                      No recent activity\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14739},"client/src/pages/inspection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport WarehouseCanvas from \"@/components/warehouse/canvas\";\nimport InspectionPanel from \"@/components/inspection/inspection-panel\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface WarehouseComponent {\n  id: string;\n  layoutId: string;\n  componentType: 'rack' | 'beam' | 'upright';\n  xPosition: number;\n  yPosition: number;\n  width: number;\n  height: number;\n  status: 'good' | 'monitor' | 'fix_4_weeks' | 'immediate';\n}\n\ninterface Inspection {\n  id: string;\n  componentId: string;\n  defectType: string;\n  customDefect?: string;\n  severity: 'red' | 'amber' | 'green';\n  notes?: string;\n  inspectionDate: string;\n  inspectorName: string;\n}\n\nexport default function Inspection() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedComponent, setSelectedComponent] = useState<WarehouseComponent | null>(null);\n  const [activeLayoutId] = useState<string>(\"default\"); // For demo purposes\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: components } = useQuery<WarehouseComponent[]>({\n    queryKey: [\"/api/layouts\", activeLayoutId, \"components\"],\n    enabled: isAuthenticated && !!activeLayoutId,\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    }\n  });\n\n  const { data: recentInspections, isLoading: inspectionsLoading } = useQuery<Inspection[]>({\n    queryKey: [\"/api/inspections\"],\n    enabled: isAuthenticated,\n  });\n\n  const createInspectionMutation = useMutation({\n    mutationFn: async (inspectionData: {\n      componentId: string;\n      defectType: string;\n      customDefect?: string;\n      severity: 'red' | 'amber' | 'green';\n      notes?: string;\n    }) => {\n      return await apiRequest(\"POST\", \"/api/inspections\", inspectionData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Inspection saved successfully\",\n      });\n      queryClient.invalidateQueries([\"/api/inspections\"]);\n      queryClient.invalidateQueries([\"/api/layouts\", activeLayoutId, \"components\"]);\n      setSelectedComponent(null);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save inspection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getSeverityBadge = (severity: string) => {\n    const variants = {\n      red: \"destructive\",\n      amber: \"secondary\", \n      green: \"default\"\n    } as const;\n    \n    const labels = {\n      red: \"Immediate\",\n      amber: \"4 Weeks\",\n      green: \"Monitor\"\n    } as const;\n\n    return (\n      <Badge variant={variants[severity as keyof typeof variants]} data-testid={`badge-inspection-severity-${severity}`}>\n        {labels[severity as keyof typeof labels]}\n      </Badge>\n    );\n  };\n\n  if (!isAuthenticated) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"flex pt-16\">\n        <Sidebar currentPage=\"inspection\" />\n        \n        <main className=\"flex-1 ml-16 lg:ml-64 transition-all duration-300\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-page-title\">\n                Inspection Workflow\n              </h2>\n              <p className=\"text-gray-600\" data-testid=\"text-page-description\">\n                Conduct inspections and mark defects on warehouse components\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Layout View */}\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle data-testid=\"text-layout-title\">\n                      Warehouse Layout - Click components to inspect\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"relative\" style={{ height: '500px' }}>\n                      <WarehouseCanvas\n                        components={components || []}\n                        onComponentSelect={setSelectedComponent}\n                        isInspectionMode={true}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Inspection Panel */}\n              <div className=\"lg:col-span-1\">\n                <InspectionPanel\n                  selectedComponent={selectedComponent}\n                  onInspectionSubmit={(inspectionData) => {\n                    createInspectionMutation.mutate(inspectionData);\n                  }}\n                  isSubmitting={createInspectionMutation.isLoading}\n                />\n              </div>\n            </div>\n\n            {/* Recent Inspections */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle data-testid=\"text-recent-inspections-title\">Recent Inspections</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\" data-testid=\"table-recent-inspections\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Date</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Component</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Defect</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Severity</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Inspector</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {inspectionsLoading ? (\n                        Array.from({ length: 3 }).map((_, i) => (\n                          <tr key={i}>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-20\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-24\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-32\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-6 w-16\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-20\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-16\" /></td>\n                          </tr>\n                        ))\n                      ) : recentInspections?.length ? (\n                        recentInspections.map((inspection) => (\n                          <tr key={inspection.id} className=\"border-b\" data-testid={`row-inspection-${inspection.componentId}`}>\n                            <td className=\"py-3 px-4\" data-testid={`text-inspection-date-${inspection.componentId}`}>\n                              {new Date(inspection.inspectionDate).toLocaleDateString()}\n                            </td>\n                            <td className=\"py-3 px-4 font-medium\" data-testid={`text-inspection-component-${inspection.componentId}`}>\n                              {inspection.componentId}\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-inspection-defect-${inspection.componentId}`}>\n                              {inspection.defectType === 'custom' ? inspection.customDefect : inspection.defectType.replace('_', ' ')}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {getSeverityBadge(inspection.severity)}\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-inspection-inspector-${inspection.componentId}`}>\n                              {inspection.inspectorName}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <button \n                                className=\"text-blue-600 hover:text-blue-800 font-medium\"\n                                data-testid={`button-edit-inspection-${inspection.componentId}`}\n                              >\n                                Edit\n                              </button>\n                            </td>\n                          </tr>\n                        ))\n                      ) : (\n                        <tr>\n                          <td colSpan={6} className=\"py-8 text-center text-gray-500\" data-testid=\"text-no-recent-inspections\">\n                            No recent inspections found\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10564},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6 text-center\">\n          <div className=\"mb-6\">\n            <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h3M9 7h1m-1 4h1m4-4h1m-1 4h1\" />\n              </svg>\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-welcome-title\">\n              Warehouse Inspection System\n            </h1>\n            <p className=\"text-gray-600\" data-testid=\"text-welcome-description\">\n              Professional pallet racking inspection and certification management\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-login\"\n            >\n              Login to Continue\n            </Button>\n            \n            <div className=\"text-sm text-gray-500\" data-testid=\"text-features\">\n              <p className=\"mb-2\">Features:</p>\n              <ul className=\"text-left space-y-1\">\n                <li>• Interactive warehouse layout editor</li>\n                <li>• Defect tracking and severity management</li>\n                <li>• Automated PDF report generation</li>\n                <li>• Role-based access control</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2046},"client/src/pages/layout-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport WarehouseCanvas from \"@/components/warehouse/canvas\";\nimport ComponentProperties from \"@/components/warehouse/component-properties\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface WarehouseLayout {\n  id: string;\n  name: string;\n  description?: string;\n}\n\ninterface WarehouseComponent {\n  id: string;\n  layoutId: string;\n  componentType: 'rack' | 'beam' | 'upright';\n  xPosition: number;\n  yPosition: number;\n  width: number;\n  height: number;\n  status: 'good' | 'monitor' | 'fix_4_weeks' | 'immediate';\n}\n\nexport default function LayoutEditor() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedComponent, setSelectedComponent] = useState<WarehouseComponent | null>(null);\n  const [activeLayoutId, setActiveLayoutId] = useState<string | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: layouts = [] } = useQuery<WarehouseLayout[]>({\n    queryKey: [\"/api/layouts\"],\n    enabled: isAuthenticated,\n  });\n\n  // Set active layout when layouts are loaded\n  useEffect(() => {\n    if (layouts && Array.isArray(layouts) && layouts.length > 0 && !activeLayoutId) {\n      setActiveLayoutId(layouts[0].id);\n    }\n  }, [layouts, activeLayoutId]);\n\n  const { data: components = [] } = useQuery<WarehouseComponent[]>({\n    queryKey: [\"/api/layouts\", activeLayoutId || 'default', \"components\"],\n    enabled: isAuthenticated,\n    retry: 1,\n  });\n\n  const saveLayoutMutation = useMutation({\n    mutationFn: async (componentsData: WarehouseComponent[]) => {\n      if (!activeLayoutId) throw new Error(\"No active layout\");\n      return await apiRequest(\"POST\", `/api/layouts/${activeLayoutId}/components/bulk`, {\n        components: componentsData,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Layout saved successfully\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/layouts\", activeLayoutId, \"components\"] \n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save layout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCsvImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('csvFile', file);\n\n    try {\n      const response = await fetch('/api/layouts/import-csv', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) throw new Error('Import failed');\n\n      const result = await response.json();\n      toast({\n        title: \"Success\",\n        description: \"Layout imported successfully\",\n      });\n      \n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/layouts\"] \n      });\n      setActiveLayoutId(result.layoutId);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to import CSV\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCsvExport = () => {\n    if (!activeLayoutId) return;\n    window.open(`/api/layouts/${activeLayoutId}/export-csv`, '_blank');\n  };\n\n  const addComponent = async (type: 'rack' | 'beam' | 'upright') => {\n    if (!activeLayoutId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a layout first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const newComponent = {\n      id: `${type.toUpperCase()}-${Date.now()}`,\n      layoutId: activeLayoutId,\n      componentType: type,\n      xPosition: 100 + Math.random() * 200,\n      yPosition: 100 + Math.random() * 200,\n      width: type === 'rack' ? 200 : type === 'beam' ? 160 : 20,\n      height: type === 'rack' ? 300 : type === 'beam' ? 20 : 300,\n      status: 'good' as const,\n    };\n\n    try {\n      // Create component via API\n      await apiRequest(\"POST\", \"/api/components\", newComponent);\n      \n      // Refresh the components list\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/layouts\", activeLayoutId, \"components\"]\n      });\n      \n      toast({\n        title: \"Success\",\n        description: `${type.charAt(0).toUpperCase() + type.slice(1)} added successfully`,\n      });\n    } catch (error) {\n      console.error(\"Error adding component:\", error);\n      toast({\n        title: \"Error\", \n        description: `Failed to add ${type}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Set first layout as active if none selected\n  useEffect(() => {\n    if (layouts?.length && !activeLayoutId) {\n      setActiveLayoutId(layouts[0].id);\n    }\n  }, [layouts, activeLayoutId]);\n\n  if (!isAuthenticated) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"flex pt-16\">\n        <Sidebar currentPage=\"layout-editor\" />\n        \n        <main className=\"flex-1 ml-16 lg:ml-64 transition-all duration-300\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-page-title\">\n                Warehouse Layout Editor\n              </h2>\n              <p className=\"text-gray-600\" data-testid=\"text-page-description\">\n                Design and modify warehouse rack layouts\n              </p>\n            </div>\n\n            {/* Toolbar */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <Button\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => addComponent('rack')}\n                    data-testid=\"button-add-rack\"\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                    </svg>\n                    Add Rack\n                  </Button>\n                  \n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => addComponent('beam')}\n                    data-testid=\"button-add-beam\"\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                    </svg>\n                    Add Beam\n                  </Button>\n                  \n                  <div className=\"h-6 border-l border-gray-300\" />\n                  \n                  <div className=\"relative\">\n                    <Input\n                      type=\"file\"\n                      accept=\".csv\"\n                      onChange={handleCsvImport}\n                      className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                      data-testid=\"input-csv-import\"\n                    />\n                    <Button variant=\"outline\" data-testid=\"button-import-csv\">\n                      <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n                      </svg>\n                      Import CSV\n                    </Button>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    onClick={handleCsvExport}\n                    disabled={!activeLayoutId}\n                    data-testid=\"button-export-csv\"\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                    Export CSV\n                  </Button>\n                </div>\n                \n                <Button\n                  onClick={() => {\n                    if (components) {\n                      saveLayoutMutation.mutate(components);\n                    }\n                  }}\n                  disabled={saveLayoutMutation.isPending || !components}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                  data-testid=\"button-save-layout\"\n                >\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\" />\n                  </svg>\n                  {saveLayoutMutation.isPending ? 'Saving...' : 'Save Layout'}\n                </Button>\n              </div>\n            </div>\n\n            {/* Canvas Container */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n              <div className=\"p-4 border-b border-gray-200 bg-gray-50\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold text-gray-900\" data-testid=\"text-canvas-title\">\n                    Warehouse Layout Canvas\n                  </h3>\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <span>Zoom:</span>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-zoom-out\">-</Button>\n                    <span data-testid=\"text-zoom-level\">100%</span>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-zoom-in\">+</Button>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"relative\" style={{ height: '600px' }}>\n                <WarehouseCanvas\n                  components={components || []}\n                  onComponentSelect={setSelectedComponent}\n                  onComponentUpdate={(updatedComponents) => {\n                    queryClient.setQueryData([\"/api/layouts\", activeLayoutId, \"components\"], updatedComponents);\n                  }}\n                />\n              </div>\n            </div>\n\n            {/* Component Properties Panel */}\n            {selectedComponent && (\n              <ComponentProperties\n                component={selectedComponent}\n                onUpdate={(updatedComponent) => {\n                  setSelectedComponent(updatedComponent);\n                  queryClient.setQueryData(\n                    [\"/api/layouts\", activeLayoutId, \"components\"],\n                    (oldComponents: WarehouseComponent[] | undefined) =>\n                      oldComponents?.map(comp =>\n                        comp.id === updatedComponent.id ? updatedComponent : comp\n                      ) || []\n                  );\n                }}\n                onDelete={() => {\n                  queryClient.setQueryData(\n                    [\"/api/layouts\", activeLayoutId, \"components\"],\n                    (oldComponents: WarehouseComponent[] | undefined) =>\n                      oldComponents?.filter(comp => comp.id !== selectedComponent.id) || []\n                  );\n                  setSelectedComponent(null);\n                }}\n              />\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12870},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport ReportPreview from \"@/components/reports/report-preview\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState } from \"react\";\n\ninterface Report {\n  id: string;\n  reportType: string;\n  generatedAt: string;\n  dateFrom: string;\n  dateTo: string;\n  generatedBy: string;\n  pdfUrl?: string;\n}\n\ninterface ReportFormData {\n  layoutId: string;\n  reportType: string;\n  dateFrom: string;\n  dateTo: string;\n  includeLayout: boolean;\n  includePhotos: boolean;\n  includeInspectorDetails: boolean;\n}\n\nexport default function Reports() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState<ReportFormData>({\n    layoutId: '',\n    reportType: 'full',\n    dateFrom: '',\n    dateTo: '',\n    includeLayout: true,\n    includePhotos: true,\n    includeInspectorDetails: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: reports, isLoading: reportsLoading } = useQuery<Report[]>({\n    queryKey: [\"/api/reports\"],\n    enabled: isAuthenticated,\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    }\n  });\n\n  const generateReportMutation = useMutation({\n    mutationFn: async (reportData: ReportFormData) => {\n      return await apiRequest(\"POST\", \"/api/reports\", reportData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Report generation started\",\n      });\n      queryClient.invalidateQueries([\"/api/reports\"]);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    generateReportMutation.mutate(formData);\n  };\n\n  const getReportTypeLabel = (type: string) => {\n    const labels = {\n      full: 'Full Inspection',\n      defects: 'Defects Summary',\n      urgent: 'Urgent Items',\n      compliance: 'Compliance Certificate'\n    } as const;\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  if (!isAuthenticated) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"flex pt-16\">\n        <Sidebar currentPage=\"reports\" />\n        \n        <main className=\"flex-1 ml-16 lg:ml-64 transition-all duration-300\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-page-title\">\n                Report Generation\n              </h2>\n              <p className=\"text-gray-600\" data-testid=\"text-page-description\">\n                Generate professional PDF inspection reports\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Report Configuration */}\n              <div className=\"lg:col-span-1\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle data-testid=\"text-report-settings-title\">Report Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"reportType\">Report Type</Label>\n                        <Select \n                          value={formData.reportType}\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, reportType: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select report type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"full\">Full Inspection Report</SelectItem>\n                            <SelectItem value=\"defects\">Defects Summary</SelectItem>\n                            <SelectItem value=\"urgent\">Urgent Items Only</SelectItem>\n                            <SelectItem value=\"compliance\">Compliance Certificate</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"dateRange\">Date Range</Label>\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          <Input\n                            type=\"date\"\n                            value={formData.dateFrom}\n                            onChange={(e) => setFormData(prev => ({ ...prev, dateFrom: e.target.value }))}\n                            required\n                          />\n                          <Input\n                            type=\"date\"\n                            value={formData.dateTo}\n                            onChange={(e) => setFormData(prev => ({ ...prev, dateTo: e.target.value }))}\n                            required\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label>Include Sections</Label>\n                        <div className=\"space-y-2 mt-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id=\"includeLayout\"\n                              checked={formData.includeLayout}\n                              onCheckedChange={(checked) => \n                                setFormData(prev => ({ ...prev, includeLayout: !!checked }))\n                              }\n                            />\n                            <Label htmlFor=\"includeLayout\">Layout Diagram</Label>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id=\"includePhotos\"\n                              checked={formData.includePhotos}\n                              onCheckedChange={(checked) => \n                                setFormData(prev => ({ ...prev, includePhotos: !!checked }))\n                              }\n                            />\n                            <Label htmlFor=\"includePhotos\">Photos</Label>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id=\"includeInspectorDetails\"\n                              checked={formData.includeInspectorDetails}\n                              onCheckedChange={(checked) => \n                                setFormData(prev => ({ ...prev, includeInspectorDetails: !!checked }))\n                              }\n                            />\n                            <Label htmlFor=\"includeInspectorDetails\">Inspector Details</Label>\n                          </div>\n                        </div>\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                        disabled={generateReportMutation.isLoading}\n                        data-testid=\"button-generate-report\"\n                      >\n                        <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                        </svg>\n                        {generateReportMutation.isLoading ? 'Generating...' : 'Generate PDF Report'}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Report Preview */}\n              <div className=\"lg:col-span-2\">\n                <ReportPreview formData={formData} />\n              </div>\n            </div>\n\n            {/* Previous Reports */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle data-testid=\"text-previous-reports-title\">Previous Reports</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\" data-testid=\"table-previous-reports\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Generated</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Report Type</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Period</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Generated By</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {reportsLoading ? (\n                        Array.from({ length: 3 }).map((_, i) => (\n                          <tr key={i}>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-24\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-20\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-16\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-20\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-16\" /></td>\n                          </tr>\n                        ))\n                      ) : reports?.length ? (\n                        reports.map((report) => (\n                          <tr key={report.id} className=\"border-b\" data-testid={`row-report-${report.id}`}>\n                            <td className=\"py-3 px-4\" data-testid={`text-report-generated-${report.id}`}>\n                              {new Date(report.generatedAt).toLocaleString()}\n                            </td>\n                            <td className=\"py-3 px-4 font-medium\" data-testid={`text-report-type-${report.id}`}>\n                              {getReportTypeLabel(report.reportType)}\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-report-period-${report.id}`}>\n                              {new Date(report.dateFrom).toLocaleDateString()}\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-report-user-${report.id}`}>\n                              {report.generatedBy}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {report.pdfUrl && (\n                                <a\n                                  href={report.pdfUrl}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-blue-600 hover:text-blue-800 font-medium mr-3\"\n                                  data-testid={`link-download-report-${report.id}`}\n                                >\n                                  Download\n                                </a>\n                              )}\n                              <button \n                                className=\"text-gray-500 hover:text-gray-700\"\n                                data-testid={`button-delete-report-${report.id}`}\n                              >\n                                Delete\n                              </button>\n                            </td>\n                          </tr>\n                        ))\n                      ) : (\n                        <tr>\n                          <td colSpan={5} className=\"py-8 text-center text-gray-500\" data-testid=\"text-no-previous-reports\">\n                            No previous reports found\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14121},"client/src/pages/users.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName: string;\n  lastLogin?: string;\n  isActive: boolean;\n  profile?: {\n    role: 'inspector' | 'admin';\n  };\n}\n\nexport default function Users() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [newUserData, setNewUserData] = useState({\n    fullName: '',\n    email: '',\n    role: 'inspector' as 'inspector' | 'admin'\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Check if user is admin\n  useEffect(() => {\n    if (user && user.profile?.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin privileges required\",\n        variant: \"destructive\",\n      });\n      window.history.back();\n    }\n  }, [user, toast]);\n\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: isAuthenticated && user?.profile?.role === 'admin',\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    }\n  });\n\n  const handleAddUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement user creation\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"User creation will be implemented in the next version\",\n    });\n    setShowAddModal(false);\n    setNewUserData({ fullName: '', email: '', role: 'inspector' });\n  };\n\n  const getRoleBadge = (role: string) => {\n    return (\n      <Badge \n        variant={role === 'admin' ? 'default' : 'secondary'}\n        data-testid={`badge-user-role-${role}`}\n      >\n        {role === 'admin' ? 'Administrator' : 'Inspector'}\n      </Badge>\n    );\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return (\n      <Badge \n        variant={isActive ? 'default' : 'secondary'}\n        className={isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}\n        data-testid={`badge-user-status-${isActive ? 'active' : 'inactive'}`}\n      >\n        {isActive ? 'Active' : 'Inactive'}\n      </Badge>\n    );\n  };\n\n  if (!isAuthenticated || user?.profile?.role !== 'admin') return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"flex pt-16\">\n        <Sidebar currentPage=\"users\" />\n        \n        <main className=\"flex-1 ml-16 lg:ml-64 transition-all duration-300\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"text-page-title\">\n                User Management\n              </h2>\n              <p className=\"text-gray-600\" data-testid=\"text-page-description\">\n                Manage inspectors and administrators\n              </p>\n            </div>\n\n            {/* Add User Button */}\n            <div className=\"mb-6\">\n              <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-user\">\n                    <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                    </svg>\n                    Add New User\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle data-testid=\"text-add-user-title\">Add New User</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleAddUser} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"fullName\">Full Name</Label>\n                      <Input\n                        id=\"fullName\"\n                        value={newUserData.fullName}\n                        onChange={(e) => setNewUserData(prev => ({ ...prev, fullName: e.target.value }))}\n                        required\n                        data-testid=\"input-full-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={newUserData.email}\n                        onChange={(e) => setNewUserData(prev => ({ ...prev, email: e.target.value }))}\n                        required\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"role\">Role</Label>\n                      <Select \n                        value={newUserData.role}\n                        onValueChange={(value: 'inspector' | 'admin') => \n                          setNewUserData(prev => ({ ...prev, role: value }))\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"inspector\">Inspector</SelectItem>\n                          <SelectItem value=\"admin\">Administrator</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex justify-end space-x-3 pt-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setShowAddModal(false)}\n                        data-testid=\"button-cancel-add-user\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        data-testid=\"button-create-user\"\n                      >\n                        Create User\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Users Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-users-table-title\">System Users</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\" data-testid=\"table-users\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Name</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Email</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Role</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Last Login</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Status</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {usersLoading ? (\n                        Array.from({ length: 3 }).map((_, i) => (\n                          <tr key={i}>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex items-center\">\n                                <Skeleton className=\"w-8 h-8 rounded-full mr-3\" />\n                                <Skeleton className=\"h-4 w-24\" />\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-32\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-6 w-16\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-20\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-6 w-16\" /></td>\n                            <td className=\"py-3 px-4\"><Skeleton className=\"h-4 w-16\" /></td>\n                          </tr>\n                        ))\n                      ) : users?.length ? (\n                        users.map((user) => (\n                          <tr key={user.id} className=\"border-b\" data-testid={`row-user-${user.id}`}>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex items-center\">\n                                <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium mr-3\">\n                                  {(user.firstName?.[0] || user.email[0]).toUpperCase()}\n                                  {(user.lastName?.[0] || '').toUpperCase()}\n                                </div>\n                                <span className=\"font-medium\" data-testid={`text-user-name-${user.id}`}>\n                                  {user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}\n                                </span>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-user-email-${user.id}`}>\n                              {user.email}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {getRoleBadge(user.profile?.role || 'inspector')}\n                            </td>\n                            <td className=\"py-3 px-4\" data-testid={`text-user-last-login-${user.id}`}>\n                              {user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {getStatusBadge(user.isActive)}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <button \n                                className=\"text-blue-600 hover:text-blue-800 font-medium mr-3\"\n                                data-testid={`button-edit-user-${user.id}`}\n                              >\n                                Edit\n                              </button>\n                              <button \n                                className={`font-medium ${user.isActive ? 'text-gray-500 hover:text-gray-700' : 'text-green-600 hover:text-green-800'}`}\n                                data-testid={`button-${user.isActive ? 'deactivate' : 'activate'}-user-${user.id}`}\n                              >\n                                {user.isActive ? 'Deactivate' : 'Activate'}\n                              </button>\n                            </td>\n                          </tr>\n                        ))\n                      ) : (\n                        <tr>\n                          <td colSpan={6} className=\"py-8 text-center text-gray-500\" data-testid=\"text-no-users\">\n                            No users found\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13003},"core/management/commands/__init__.py":{"content":"","size_bytes":0},"core/management/commands/create_sample_data.py":{"content":"from django.core.management.base import BaseCommand\nfrom django.contrib.auth.models import User\nfrom core.models import (\n    WarehouseLayout, WarehouseComponent, Inspection, UserProfile,\n    ComponentType, ComponentStatus, DefectType, SeverityLevel\n)\nimport uuid\n\n\nclass Command(BaseCommand):\n    help = 'Create sample data for the warehouse inspection system'\n\n    def handle(self, *args, **options):\n        # Create admin user\n        admin_user, created = User.objects.get_or_create(\n            username='admin',\n            defaults={\n                'email': 'admin@warehouse.com',\n                'first_name': 'John',\n                'last_name': 'Doe',\n                'is_staff': True,\n                'is_superuser': True\n            }\n        )\n        if created:\n            admin_user.set_password('admin123')\n            admin_user.save()\n            UserProfile.objects.create(\n                user=admin_user,\n                role='admin',\n                certification_number='CERT-001'\n            )\n            self.stdout.write(self.style.SUCCESS(f'Created admin user: {admin_user.username}'))\n\n        # Create inspector users\n        inspector_users = []\n        for i, (first, last, email) in enumerate([\n            ('Sarah', 'Wilson', 'sarah.wilson@warehouse.com'),\n            ('Mike', 'Chen', 'mike.chen@warehouse.com')\n        ], 1):\n            user, created = User.objects.get_or_create(\n                username=f'inspector{i}',\n                defaults={\n                    'email': email,\n                    'first_name': first,\n                    'last_name': last\n                }\n            )\n            if created:\n                user.set_password('inspector123')\n                user.save()\n                UserProfile.objects.create(\n                    user=user,\n                    role='inspector',\n                    certification_number=f'CERT-{i+1:03d}'\n                )\n                self.stdout.write(self.style.SUCCESS(f'Created inspector user: {user.username}'))\n            inspector_users.append(user)\n\n        # Create sample warehouse layout\n        layout, created = WarehouseLayout.objects.get_or_create(\n            name='Main Warehouse Layout',\n            defaults={\n                'description': 'Primary warehouse racking layout',\n                'created_by': admin_user\n            }\n        )\n        if created:\n            self.stdout.write(self.style.SUCCESS(f'Created layout: {layout.name}'))\n\n        # Create sample components\n        components_data = [\n            ('RK-A1-B1', ComponentType.RACK, 50, 50, 120, 60, ComponentStatus.GOOD),\n            ('RK-A1-B2', ComponentType.RACK, 200, 50, 120, 60, ComponentStatus.MONITOR),\n            ('RK-A1-B3', ComponentType.RACK, 350, 50, 120, 60, ComponentStatus.FIX_4_WEEKS),\n            ('RK-B1-B1', ComponentType.RACK, 50, 150, 120, 60, ComponentStatus.GOOD),\n            ('RK-B2-U1', ComponentType.UPRIGHT, 200, 150, 120, 60, ComponentStatus.IMMEDIATE),\n            ('RK-B3-B1', ComponentType.BEAM, 350, 150, 120, 60, ComponentStatus.FIX_4_WEEKS),\n        ]\n\n        for comp_id, comp_type, x, y, width, height, status in components_data:\n            component, created = WarehouseComponent.objects.get_or_create(\n                id=comp_id,\n                defaults={\n                    'layout': layout,\n                    'component_type': comp_type,\n                    'x_position': x,\n                    'y_position': y,\n                    'width': width,\n                    'height': height,\n                    'status': status\n                }\n            )\n            if created:\n                self.stdout.write(self.style.SUCCESS(f'Created component: {comp_id}'))\n\n        # Create sample inspections\n        inspections_data = [\n            ('RK-A1-B3', DefectType.BENT_UPRIGHT, '', SeverityLevel.AMBER, 'Minor bending observed on upright post'),\n            ('RK-B2-U1', DefectType.LOOSE_CONNECTIONS, '', SeverityLevel.RED, 'Several bolts are loose and require immediate attention'),\n            ('RK-B3-B1', DefectType.CORROSION, '', SeverityLevel.AMBER, 'Surface rust on beam connection points'),\n        ]\n\n        for comp_id, defect_type, custom_defect, severity, notes in inspections_data:\n            try:\n                component = WarehouseComponent.objects.get(id=comp_id)\n                inspector = inspector_users[0] if inspector_users else admin_user\n                \n                inspection, created = Inspection.objects.get_or_create(\n                    component=component,\n                    defect_type=defect_type,\n                    severity=severity,\n                    defaults={\n                        'inspector': inspector,\n                        'custom_defect': custom_defect,\n                        'notes': notes\n                    }\n                )\n                if created:\n                    self.stdout.write(self.style.SUCCESS(f'Created inspection for {comp_id}'))\n            except WarehouseComponent.DoesNotExist:\n                self.stdout.write(self.style.WARNING(f'Component {comp_id} not found for inspection'))\n\n        self.stdout.write(self.style.SUCCESS('Sample data creation completed successfully!'))\n        self.stdout.write(self.style.SUCCESS('Admin credentials: admin / admin123'))\n        self.stdout.write(self.style.SUCCESS('Inspector credentials: inspector1 / inspector123'))\n","size_bytes":5407},"static/fontawesome/css/all.min.css":{"content":"/* Font Awesome Free 6.4.0 - Minimal local version for Warehouse Inspection System */\n@font-face {\n  font-family: 'Font Awesome 6 Free';\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url('../webfonts/fa-regular-400.woff2') format('woff2'),\n       url('../webfonts/fa-regular-400.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'Font Awesome 6 Free';\n  font-style: normal;\n  font-weight: 900;\n  font-display: block;\n  src: url('../webfonts/fa-solid-900.woff2') format('woff2'),\n       url('../webfonts/fa-solid-900.woff') format('woff');\n}\n\n.fa, .fas, .far {\n  font-family: 'Font Awesome 6 Free';\n  font-weight: 900;\n  line-height: 1;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.far {\n  font-weight: 400;\n}\n\n/* Core icons used in the application */\n.fa-bars:before { content: \"\\f0c9\"; }\n.fa-tachometer-alt:before { content: \"\\f3fd\"; }\n.fa-warehouse:before { content: \"\\f494\"; }\n.fa-clipboard-check:before { content: \"\\f46c\"; }\n.fa-file-pdf:before { content: \"\\f1c1\"; }\n.fa-users:before { content: \"\\f0c0\"; }\n.fa-cog:before { content: \"\\f013\"; }\n.fa-exclamation-triangle:before { content: \"\\f071\"; }\n.fa-clock:before { content: \"\\f017\"; }\n.fa-eye:before { content: \"\\f06e\"; }\n.fa-check-circle:before { content: \"\\f058\"; }\n.fa-plus:before { content: \"\\f067\"; }\n.fa-grip-lines:before { content: \"\\f7a4\"; }\n.fa-upload:before { content: \"\\f093\"; }\n.fa-download:before { content: \"\\f019\"; }\n.fa-save:before { content: \"\\f0c7\"; }\n.fa-camera:before { content: \"\\f030\"; }\n.fa-trash:before { content: \"\\f1f8\"; }\n.fa-edit:before { content: \"\\f044\"; }\n.fa-chevron-down:before { content: \"\\f078\"; }\n.fa-chevron-up:before { content: \"\\f077\"; }\n.fa-times:before { content: \"\\f00d\"; }\n.fa-info-circle:before { content: \"\\f05a\"; }\n.fa-exclamation-circle:before { content: \"\\f06a\"; }\n.fa-mouse-pointer:before { content: \"\\f245\"; }\n\n/* Utility classes */\n.fa-xs { font-size: 0.75em; }\n.fa-sm { font-size: 0.875em; }\n.fa-lg { font-size: 1.25em; }\n.fa-xl { font-size: 1.5em; }\n.fa-2x { font-size: 2em; }\n.fa-3x { font-size: 3em; }\n.fa-4x { font-size: 4em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-spin {\n  animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  animation: fa-pulse 1s infinite steps(8);\n}\n\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Text and background color utilities */\n.text-primary { color: #1565C0; }\n.text-secondary { color: #37474F; }\n.text-success { color: #2E7D32; }\n.text-warning { color: #F57F17; }\n.text-danger { color: #C62828; }\n\n/* Additional spacing and layout utilities */\n.mr-1 { margin-right: 0.25rem; }\n.mr-2 { margin-right: 0.5rem; }\n.mr-3 { margin-right: 0.75rem; }\n.ml-1 { margin-left: 0.25rem; }\n.ml-2 { margin-left: 0.5rem; }\n.ml-3 { margin-left: 0.75rem; }\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .fa-lg { font-size: 1.125em; }\n  .fa-xl { font-size: 1.25em; }\n  .fa-2x { font-size: 1.5em; }\n}\n","size_bytes":3148},"client/src/components/inspection/inspection-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n\ninterface WarehouseComponent {\n  id: string;\n  componentType: 'rack' | 'beam' | 'upright';\n  status: 'good' | 'monitor' | 'fix_4_weeks' | 'immediate';\n}\n\ninterface InspectionData {\n  componentId: string;\n  defectType: string;\n  customDefect?: string;\n  severity: 'red' | 'amber' | 'green';\n  notes?: string;\n}\n\ninterface InspectionPanelProps {\n  selectedComponent: WarehouseComponent | null;\n  onInspectionSubmit: (data: InspectionData) => void;\n  isSubmitting?: boolean;\n}\n\nconst defectTypes = [\n  { value: 'bent_upright', label: 'Bent Upright' },\n  { value: 'damaged_beam', label: 'Damaged Beam' },\n  { value: 'loose_connections', label: 'Loose Connections' },\n  { value: 'corrosion', label: 'Corrosion/Rust' },\n  { value: 'missing_components', label: 'Missing Components' },\n  { value: 'overloading', label: 'Overloading' },\n  { value: 'custom', label: 'Custom Defect' }\n];\n\nconst severityLevels = [\n  { \n    value: 'green', \n    label: 'Monitor - No immediate action required',\n    color: 'text-green-600'\n  },\n  { \n    value: 'amber', \n    label: 'Fix within 4 weeks',\n    color: 'text-yellow-600'\n  },\n  { \n    value: 'red', \n    label: 'Immediate threat - Fix now',\n    color: 'text-red-600'\n  }\n];\n\nexport default function InspectionPanel({ \n  selectedComponent, \n  onInspectionSubmit, \n  isSubmitting = false \n}: InspectionPanelProps) {\n  const [formData, setFormData] = useState<InspectionData>({\n    componentId: '',\n    defectType: '',\n    customDefect: '',\n    severity: 'green',\n    notes: ''\n  });\n\n  const [showCustomDefect, setShowCustomDefect] = useState(false);\n\n  useEffect(() => {\n    if (selectedComponent) {\n      setFormData(prev => ({\n        ...prev,\n        componentId: selectedComponent.id\n      }));\n    }\n  }, [selectedComponent]);\n\n  const handleDefectTypeChange = (value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      defectType: value,\n      customDefect: value === 'custom' ? prev.customDefect : ''\n    }));\n    setShowCustomDefect(value === 'custom');\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedComponent || !formData.defectType || !formData.severity) {\n      return;\n    }\n\n    onInspectionSubmit(formData);\n    \n    // Reset form\n    setFormData({\n      componentId: '',\n      defectType: '',\n      customDefect: '',\n      severity: 'green',\n      notes: ''\n    });\n    setShowCustomDefect(false);\n  };\n\n  if (!selectedComponent) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\" data-testid=\"message-no-selection\">\n            <svg className=\"w-12 h-12 mx-auto text-gray-300 mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122\" />\n            </svg>\n            <p className=\"text-gray-500\">Click on a component in the layout to begin inspection</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle data-testid=\"text-inspection-title\">Component Inspection</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"selected-component\">Component ID</Label>\n            <Input\n              id=\"selected-component\"\n              value={selectedComponent.id}\n              readOnly\n              className=\"bg-gray-50\"\n              data-testid=\"input-selected-component\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"defect-type\">Defect Type</Label>\n            <Select \n              value={formData.defectType}\n              onValueChange={handleDefectTypeChange}\n              required\n            >\n              <SelectTrigger data-testid=\"select-defect-type\">\n                <SelectValue placeholder=\"Select defect type...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {defectTypes.map((type) => (\n                  <SelectItem key={type.value} value={type.value}>\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {showCustomDefect && (\n            <div>\n              <Label htmlFor=\"custom-defect\">Custom Defect Description</Label>\n              <Input\n                id=\"custom-defect\"\n                value={formData.customDefect}\n                onChange={(e) => setFormData(prev => ({ ...prev, customDefect: e.target.value }))}\n                placeholder=\"Describe the custom defect\"\n                required={showCustomDefect}\n                data-testid=\"input-custom-defect\"\n              />\n            </div>\n          )}\n\n          <div>\n            <Label>Severity Level</Label>\n            <RadioGroup \n              value={formData.severity}\n              onValueChange={(value: 'red' | 'amber' | 'green') => \n                setFormData(prev => ({ ...prev, severity: value }))\n              }\n              className=\"mt-2\"\n            >\n              {severityLevels.map((level) => (\n                <div key={level.value} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem \n                    value={level.value} \n                    id={level.value}\n                    data-testid={`radio-severity-${level.value}`}\n                  />\n                  <Label \n                    htmlFor={level.value}\n                    className={`text-sm ${level.color}`}\n                  >\n                    <span className={`inline-block w-3 h-3 rounded-full mr-2 ${\n                      level.value === 'green' ? 'bg-green-500' :\n                      level.value === 'amber' ? 'bg-yellow-500' : 'bg-red-500'\n                    }`} />\n                    {level.label}\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n\n          <div>\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              placeholder=\"Additional inspection notes...\"\n              rows={3}\n              data-testid=\"textarea-notes\"\n            />\n          </div>\n\n          <div>\n            <Label>Photos</Label>\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center\">\n              <svg className=\"w-8 h-8 mx-auto text-gray-400 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\" />\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\" />\n              </svg>\n              <p className=\"text-sm text-gray-500\">Click to upload photos</p>\n              <input \n                type=\"file\" \n                multiple \n                accept=\"image/*\" \n                className=\"hidden\"\n                data-testid=\"input-photos\"\n              />\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting || !formData.defectType || !formData.severity}\n            className=\"w-full bg-blue-600 hover:bg-blue-700\"\n            data-testid=\"button-save-inspection\"\n          >\n            {isSubmitting ? 'Saving...' : 'Save Inspection'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8351},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useUrgentItems } from \"@/hooks/useUrgentItems\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface HeaderProps {\n  onSidebarToggle?: () => void;\n}\n\nexport default function Header({ onSidebarToggle }: HeaderProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { urgentCount } = useUrgentItems();\n\n  const getUserInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    return user?.email?.[0]?.toUpperCase() || 'U';\n  };\n\n  const getUserDisplayName = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user?.email || 'User';\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 fixed w-full top-0 z-50\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onSidebarToggle}\n            className=\"text-gray-600 hover:text-gray-900\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n            </svg>\n          </Button>\n          <h1 className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-app-title\">\n            Warehouse Inspection System\n          </h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {isAuthenticated && (\n            <>\n              {/* Urgent Items Badge */}\n              {urgentCount > 0 && (\n                <Badge variant=\"destructive\" data-testid=\"badge-urgent-items\">\n                  <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                  </svg>\n                  {urgentCount} Urgent Items\n                </Badge>\n              )}\n              \n              {/* User Menu */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900\"\n                    data-testid=\"button-user-menu\"\n                  >\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                      {getUserInitials()}\n                    </div>\n                    <span className=\"text-sm font-medium\" data-testid=\"text-username\">\n                      {getUserDisplayName()}\n                    </span>\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem data-testid=\"link-profile-settings\">\n                    Profile Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem data-testid=\"link-change-password\">\n                    Change Password\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={() => window.location.href = '/api/logout'}\n                    data-testid=\"link-logout\"\n                  >\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          )}\n          \n          {!isAuthenticated && (\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"link-login\"\n            >\n              Login\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4639},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\ninterface SidebarProps {\n  currentPage?: string;\n}\n\nconst navigation = [\n  {\n    name: 'Dashboard',\n    href: '/',\n    icon: 'fa-tachometer-alt',\n    id: 'dashboard'\n  },\n  {\n    name: 'Layout Editor',\n    href: '/layout-editor',\n    icon: 'fa-warehouse',\n    id: 'layout-editor'\n  },\n  {\n    name: 'Inspections',\n    href: '/inspection',\n    icon: 'fa-clipboard-check',\n    id: 'inspection'\n  },\n  {\n    name: 'Reports',\n    href: '/reports',\n    icon: 'fa-file-pdf',\n    id: 'reports'\n  },\n  {\n    name: 'User Management',\n    href: '/users',\n    icon: 'fa-users',\n    id: 'users',\n    adminOnly: true\n  }\n];\n\nexport default function Sidebar({ currentPage }: SidebarProps) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const isAdmin = user?.profile?.role === 'admin';\n\n  const filteredNavigation = navigation.filter(item => \n    !item.adminOnly || isAdmin\n  );\n\n  return (\n    <aside \n      className={cn(\n        \"bg-white shadow-sm border-r border-gray-200 h-screen transition-all duration-300 fixed z-40\",\n        isCollapsed ? \"w-16\" : \"w-64\"\n      )}\n    >\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        {!isCollapsed && (\n          <h2 className=\"text-sm font-semibold text-gray-900\">Navigation</h2>\n        )}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          className=\"text-gray-600 hover:text-gray-900\"\n          data-testid=\"button-toggle-sidebar-collapse\"\n        >\n          <i className={`fas ${isCollapsed ? 'fa-chevron-right' : 'fa-chevron-left'}`} />\n        </Button>\n      </div>\n\n      <nav className=\"p-4 space-y-2\">\n        {filteredNavigation.map((item) => {\n          const isActive = currentPage === item.id || location === item.href;\n          \n          return (\n            <Link key={item.id} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  \"w-full justify-start\",\n                  isActive \n                    ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                    : \"text-gray-600 hover:bg-gray-100 hover:text-gray-900\"\n                )}\n                data-testid={`link-${item.id}`}\n              >\n                <i className={`fas ${item.icon} ${isCollapsed ? '' : 'mr-3'}`} />\n                {!isCollapsed && (\n                  <span className=\"font-medium\">{item.name}</span>\n                )}\n              </Button>\n            </Link>\n          );\n        })}\n\n        <div className=\"pt-4 border-t border-gray-200\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-gray-600 hover:bg-gray-100 hover:text-gray-900\"\n            onClick={() => window.open('/admin/', '_blank')}\n            data-testid=\"link-admin\"\n          >\n            <i className={`fas fa-cog ${isCollapsed ? '' : 'mr-3'}`} />\n            {!isCollapsed && <span className=\"font-medium\">Admin</span>}\n          </Button>\n        </div>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":3329},"client/src/components/reports/report-preview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface ReportFormData {\n  layoutId: string;\n  reportType: string;\n  dateFrom: string;\n  dateTo: string;\n  includeLayout: boolean;\n  includePhotos: boolean;\n  includeInspectorDetails: boolean;\n}\n\ninterface ReportPreviewProps {\n  formData: ReportFormData;\n}\n\nexport default function ReportPreview({ formData }: ReportPreviewProps) {\n  const getReportTypeTitle = (type: string) => {\n    const titles = {\n      full: 'Full Inspection Report',\n      defects: 'Defects Summary Report',\n      urgent: 'Urgent Items Report',\n      compliance: 'Compliance Certificate'\n    };\n    return titles[type as keyof typeof titles] || 'Inspection Report';\n  };\n\n  const getCurrentMonth = () => {\n    return new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle data-testid=\"text-report-preview-title\">Report Preview</CardTitle>\n      </CardHeader>\n      <CardContent className=\"bg-gray-50 min-h-96\">\n        <div \n          className=\"bg-white p-8 shadow-sm rounded-lg max-w-2xl mx-auto\"\n          data-testid=\"container-report-preview\"\n        >\n          {/* Report Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h3M9 7h1m-1 4h1m4-4h1m-1 4h1\" />\n              </svg>\n            </div>\n            <h1 \n              className=\"text-2xl font-bold text-gray-900 mb-2\" \n              data-testid=\"text-preview-title\"\n            >\n              {getReportTypeTitle(formData.reportType)}\n            </h1>\n            <p \n              className=\"text-gray-600\" \n              data-testid=\"text-preview-period\"\n            >\n              Certification Period: {getCurrentMonth()}\n            </p>\n            {formData.dateFrom && formData.dateTo && (\n              <p className=\"text-sm text-gray-500\">\n                Report Range: {new Date(formData.dateFrom).toLocaleDateString()} - {new Date(formData.dateTo).toLocaleDateString()}\n              </p>\n            )}\n          </div>\n\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <div \n              className=\"text-center p-4 bg-red-50 border border-red-200 rounded-lg\"\n              data-testid=\"card-preview-immediate\"\n            >\n              <div \n                className=\"text-2xl font-bold text-red-600\" \n                data-testid=\"text-preview-immediate\"\n              >\n                3\n              </div>\n              <div className=\"text-sm text-gray-600\">Immediate Threats</div>\n            </div>\n            <div \n              className=\"text-center p-4 bg-yellow-50 border border-yellow-200 rounded-lg\"\n              data-testid=\"card-preview-amber\"\n            >\n              <div \n                className=\"text-2xl font-bold text-yellow-600\" \n                data-testid=\"text-preview-amber\"\n              >\n                12\n              </div>\n              <div className=\"text-sm text-gray-600\">4 Week Fixes</div>\n            </div>\n            <div \n              className=\"text-center p-4 bg-green-50 border border-green-200 rounded-lg\"\n              data-testid=\"card-preview-green\"\n            >\n              <div \n                className=\"text-2xl font-bold text-green-600\" \n                data-testid=\"text-preview-green\"\n              >\n                45\n              </div>\n              <div className=\"text-sm text-gray-600\">Monitor Only</div>\n            </div>\n          </div>\n\n          {/* Layout Overview */}\n          {formData.includeLayout && (\n            <div className=\"mb-6\">\n              <h3 \n                className=\"font-semibold text-gray-900 mb-3\" \n                data-testid=\"text-preview-layout-title\"\n              >\n                Layout Overview\n              </h3>\n              <div \n                className=\"bg-gray-100 h-32 rounded-lg flex items-center justify-center text-gray-500\"\n                data-testid=\"placeholder-layout-diagram\"\n              >\n                Layout diagram will be rendered here\n              </div>\n            </div>\n          )}\n\n          {/* Critical Defects */}\n          {(formData.reportType === 'full' || formData.reportType === 'defects' || formData.reportType === 'urgent') && (\n            <div className=\"mb-6\">\n              <h3 \n                className=\"font-semibold text-gray-900 mb-3\" \n                data-testid=\"text-preview-defects-title\"\n              >\n                {formData.reportType === 'urgent' ? 'Urgent Items' : 'Critical Defects'}\n              </h3>\n              <div className=\"space-y-2 text-sm\" data-testid=\"list-preview-defects\">\n                <div \n                  className=\"flex justify-between items-center p-2 bg-red-50 border border-red-200 rounded\"\n                  data-testid=\"item-preview-defect-1\"\n                >\n                  <span>RK-A1-B3: Bent upright</span>\n                  <span className=\"text-red-600 font-medium\">Immediate</span>\n                </div>\n                <div \n                  className=\"flex justify-between items-center p-2 bg-red-50 border border-red-200 rounded\"\n                  data-testid=\"item-preview-defect-2\"\n                >\n                  <span>RK-C1-B2: Loose connections</span>\n                  <span className=\"text-red-600 font-medium\">Immediate</span>\n                </div>\n                {formData.reportType !== 'urgent' && (\n                  <div className=\"flex justify-between items-center p-2 bg-yellow-50 border border-yellow-200 rounded\">\n                    <span>RK-B3-B1: Surface corrosion</span>\n                    <span className=\"text-yellow-600 font-medium\">4 Weeks</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Inspector Details */}\n          {formData.includeInspectorDetails && (\n            <div className=\"mb-6 pb-6 border-b border-gray-200\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Inspector Information</h3>\n              <div className=\"text-sm text-gray-600\">\n                <p>Lead Inspector: John Doe</p>\n                <p>Certification: CERT-001</p>\n                <p>Inspection Date: {new Date().toLocaleDateString()}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Photos Section */}\n          {formData.includePhotos && (\n            <div className=\"mb-6\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Photographic Evidence</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"bg-gray-100 h-24 rounded-lg flex items-center justify-center text-gray-500 text-sm\">\n                  Photo 1\n                </div>\n                <div className=\"bg-gray-100 h-24 rounded-lg flex items-center justify-center text-gray-500 text-sm\">\n                  Photo 2\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Report Footer */}\n          <div className=\"text-center text-sm text-gray-500 pt-6 border-t border-gray-200\">\n            <p>Generated on {new Date().toLocaleDateString()}</p>\n            <p className=\"mt-1\">Warehouse Inspection System v1.0</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7654},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/warehouse/canvas.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport Konva from \"konva\";\n\ninterface WarehouseComponent {\n  id: string;\n  layoutId: string;\n  componentType: 'rack' | 'beam' | 'upright';\n  xPosition: number;\n  yPosition: number;\n  width: number;\n  height: number;\n  status: 'good' | 'monitor' | 'fix_4_weeks' | 'immediate';\n}\n\ninterface WarehouseCanvasProps {\n  components: WarehouseComponent[];\n  onComponentSelect?: (component: WarehouseComponent) => void;\n  onComponentUpdate?: (components: WarehouseComponent[]) => void;\n  isInspectionMode?: boolean;\n  className?: string;\n}\n\nexport default function WarehouseCanvas({\n  components,\n  onComponentSelect,\n  onComponentUpdate,\n  isInspectionMode = false,\n  className = \"\"\n}: WarehouseCanvasProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const stageRef = useRef<Konva.Stage | null>(null);\n  const layerRef = useRef<Konva.Layer | null>(null);\n  const [selectedComponent, setSelectedComponent] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Initialize Konva stage\n    const stage = new Konva.Stage({\n      container: containerRef.current,\n      width: containerRef.current.offsetWidth,\n      height: containerRef.current.offsetHeight,\n      draggable: false,\n    });\n\n    const layer = new Konva.Layer();\n    stage.add(layer);\n\n    stageRef.current = stage;\n    layerRef.current = layer;\n\n    // Draw grid background\n    drawGrid(layer, stage.width(), stage.height());\n\n    // Handle window resize\n    const handleResize = () => {\n      if (containerRef.current && stage) {\n        stage.width(containerRef.current.offsetWidth);\n        stage.height(containerRef.current.offsetHeight);\n        stage.draw();\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      stage.destroy();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!stageRef.current || !layerRef.current) return;\n\n    const layer = layerRef.current;\n    \n    // Clear existing components (except grid)\n    const componentsToRemove = layer.children.filter(child => \n      child.getClassName() === 'Group' && child.name() === 'component'\n    );\n    componentsToRemove.forEach(child => child.destroy());\n\n    // Add components\n    components.forEach(component => {\n      addComponentToCanvas(component, layer);\n    });\n\n    layer.draw();\n  }, [components]);\n\n  const drawGrid = (layer: Konva.Layer, width: number, height: number) => {\n    const gridSize = 20;\n    \n    // Vertical lines\n    for (let i = 0; i <= width / gridSize; i++) {\n      const line = new Konva.Line({\n        points: [i * gridSize, 0, i * gridSize, height],\n        stroke: '#f0f0f0',\n        strokeWidth: 1,\n        listening: false,\n        name: 'grid'\n      });\n      layer.add(line);\n    }\n    \n    // Horizontal lines\n    for (let i = 0; i <= height / gridSize; i++) {\n      const line = new Konva.Line({\n        points: [0, i * gridSize, width, i * gridSize],\n        stroke: '#f0f0f0',\n        strokeWidth: 1,\n        listening: false,\n        name: 'grid'\n      });\n      layer.add(line);\n    }\n  };\n\n  const addComponentToCanvas = (component: WarehouseComponent, layer: Konva.Layer) => {\n    const group = new Konva.Group({\n      x: component.xPosition,\n      y: component.yPosition,\n      draggable: !isInspectionMode,\n      name: 'component',\n      id: component.id\n    });\n\n    // Main rectangle\n    const rect = new Konva.Rect({\n      width: component.width,\n      height: component.height,\n      fill: getStatusColor(component.status),\n      stroke: getStatusBorderColor(component.status),\n      strokeWidth: 2,\n      cornerRadius: 4,\n      name: 'rect'\n    });\n\n    // Component label\n    const text = new Konva.Text({\n      x: 5,\n      y: component.height / 2 - 8,\n      text: component.id,\n      fontSize: 12,\n      fontFamily: 'Inter, system-ui, sans-serif',\n      fill: '#000',\n      width: component.width - 10,\n      align: 'center',\n      name: 'text'\n    });\n\n    // Type indicator\n    const typeIcon = new Konva.Text({\n      x: 5,\n      y: 5,\n      text: getTypeIcon(component.componentType),\n      fontSize: 10,\n      fontFamily: 'Inter, system-ui, sans-serif',\n      fill: '#666',\n      name: 'typeIcon'\n    });\n\n    // Status indicator\n    const statusIcon = getStatusIcon(component.status);\n    if (statusIcon) {\n      const statusText = new Konva.Text({\n        x: component.width - 20,\n        y: 5,\n        text: statusIcon,\n        fontSize: 14,\n        fontFamily: 'Inter, system-ui, sans-serif',\n        fill: getStatusBorderColor(component.status),\n        name: 'statusIcon'\n      });\n      group.add(statusText);\n    }\n\n    group.add(rect);\n    group.add(text);\n    group.add(typeIcon);\n\n    // Event listeners\n    group.on('click tap', () => {\n      selectComponent(component, group);\n    });\n\n    if (!isInspectionMode) {\n      group.on('dragmove', () => {\n        snapToGrid(group);\n      });\n\n      group.on('dragend', () => {\n        updateComponentPosition(component, group);\n      });\n    }\n\n    group.on('mouseenter', () => {\n      document.body.style.cursor = isInspectionMode ? 'pointer' : 'move';\n      rect.stroke('#007bff');\n      rect.strokeWidth(3);\n      layer.draw();\n    });\n\n    group.on('mouseleave', () => {\n      document.body.style.cursor = 'default';\n      if (selectedComponent !== component.id) {\n        rect.stroke(getStatusBorderColor(component.status));\n        rect.strokeWidth(2);\n        layer.draw();\n      }\n    });\n\n    layer.add(group);\n  };\n\n  const selectComponent = (component: WarehouseComponent, group: Konva.Group) => {\n    // Deselect previous component\n    if (selectedComponent && layerRef.current) {\n      const prevGroup = layerRef.current.findOne(`#${selectedComponent}`) as Konva.Group;\n      if (prevGroup) {\n        const rect = prevGroup.findOne('.rect') as Konva.Rect;\n        if (rect) {\n          const prevComp = components.find(c => c.id === selectedComponent);\n          if (prevComp) {\n            rect.stroke(getStatusBorderColor(prevComp.status));\n            rect.strokeWidth(2);\n          }\n        }\n      }\n    }\n\n    // Select new component\n    setSelectedComponent(component.id);\n    const rect = group.findOne('Rect') as Konva.Rect;\n    rect.stroke('#007bff');\n    rect.strokeWidth(3);\n    layerRef.current?.draw();\n\n    onComponentSelect?.(component);\n  };\n\n  const snapToGrid = (node: Konva.Group) => {\n    const gridSize = 20;\n    const x = Math.round(node.x() / gridSize) * gridSize;\n    const y = Math.round(node.y() / gridSize) * gridSize;\n    node.x(x);\n    node.y(y);\n  };\n\n  const updateComponentPosition = (component: WarehouseComponent, group: Konva.Group) => {\n    const updatedComponent = {\n      ...component,\n      xPosition: group.x(),\n      yPosition: group.y()\n    };\n\n    const updatedComponents = components.map(c => \n      c.id === component.id ? updatedComponent : c\n    );\n\n    onComponentUpdate?.(updatedComponents);\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      'good': '#e8f5e8',\n      'monitor': '#e8f5e8',\n      'fix_4_weeks': '#fff3cd',\n      'immediate': '#f8d7da'\n    };\n    return colors[status as keyof typeof colors] || '#f8f9fa';\n  };\n\n  const getStatusBorderColor = (status: string) => {\n    const colors = {\n      'good': '#28a745',\n      'monitor': '#28a745',\n      'fix_4_weeks': '#ffc107',\n      'immediate': '#dc3545'\n    };\n    return colors[status as keyof typeof colors] || '#6c757d';\n  };\n\n  const getTypeIcon = (type: string) => {\n    const icons = {\n      'rack': '⬜',\n      'beam': '━',\n      'upright': '┃'\n    };\n    return icons[type as keyof typeof icons] || '■';\n  };\n\n  const getStatusIcon = (status: string) => {\n    const icons = {\n      'good': '✓',\n      'monitor': '✓',\n      'fix_4_weeks': '⚠',\n      'immediate': '🚨'\n    };\n    return icons[status as keyof typeof icons];\n  };\n\n  return (\n    <div \n      ref={containerRef}\n      className={`w-full h-full bg-gray-50 ${className}`}\n      data-testid={isInspectionMode ? \"canvas-inspection\" : \"canvas-container\"}\n      style={{\n        backgroundImage: 'repeating-linear-gradient(0deg, #f9f9f9, #f9f9f9 20px, transparent 20px, transparent 40px), repeating-linear-gradient(90deg, #f9f9f9, #f9f9f9 20px, transparent 20px, transparent 40px)'\n      }}\n    />\n  );\n}\n","size_bytes":8382},"client/src/components/warehouse/component-properties.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface WarehouseComponent {\n  id: string;\n  layoutId: string;\n  componentType: 'rack' | 'beam' | 'upright';\n  xPosition: number;\n  yPosition: number;\n  width: number;\n  height: number;\n  status: 'good' | 'monitor' | 'fix_4_weeks' | 'immediate';\n}\n\ninterface ComponentPropertiesProps {\n  component: WarehouseComponent;\n  onUpdate: (component: WarehouseComponent) => void;\n  onDelete: () => void;\n}\n\nexport default function ComponentProperties({ \n  component, \n  onUpdate, \n  onDelete \n}: ComponentPropertiesProps) {\n  const [formData, setFormData] = useState({\n    id: component.id,\n    componentType: component.componentType,\n    status: component.status\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const updateData = {\n      id: formData.id,\n      componentType: formData.componentType,\n      status: formData.status,\n      xPosition: component.xPosition,\n      yPosition: component.yPosition,\n      width: component.width,\n      height: component.height,\n      layoutId: component.layoutId\n    };\n    \n    try {\n      // Update component via API\n      const response = await fetch(`/api/components/${component.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(updateData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update component');\n      }\n\n      const updatedComponent = await response.json();\n      onUpdate(updatedComponent);\n      alert('Component updated successfully!');\n    } catch (error) {\n      console.error('Error updating component:', error);\n      alert('Failed to update component: ' + (error as Error).message);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <Card className=\"mt-6\" data-testid=\"component-properties-panel\">\n      <CardHeader>\n        <CardTitle data-testid=\"text-properties-title\">Component Properties</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <Label htmlFor=\"component-id\">Component ID</Label>\n              <Input\n                id=\"component-id\"\n                value={formData.id}\n                onChange={(e) => handleInputChange('id', e.target.value)}\n                placeholder=\"RK-A1-B1\"\n                data-testid=\"input-component-id\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"component-type\">Type</Label>\n              <Select \n                value={formData.componentType}\n                onValueChange={(value) => handleInputChange('componentType', value)}\n              >\n                <SelectTrigger data-testid=\"select-component-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"rack\">Rack</SelectItem>\n                  <SelectItem value=\"beam\">Beam</SelectItem>\n                  <SelectItem value=\"upright\">Upright</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"component-status\">Status</Label>\n              <Select \n                value={formData.status}\n                onValueChange={(value) => handleInputChange('status', value)}\n              >\n                <SelectTrigger data-testid=\"select-component-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"good\">Good</SelectItem>\n                  <SelectItem value=\"monitor\">Monitor</SelectItem>\n                  <SelectItem value=\"fix_4_weeks\">Fix Within 4 Weeks</SelectItem>\n                  <SelectItem value=\"immediate\">Immediate Threat</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              onClick={onDelete}\n              data-testid=\"button-delete-component\"\n            >\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n              </svg>\n              Delete\n            </Button>\n            <Button \n              type=\"submit\"\n              data-testid=\"button-update-component\"\n            >\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\" />\n              </svg>\n              Update\n            </Button>\n          </div>\n        </form>\n        \n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600\">\n            <div>\n              <span className=\"font-medium\">Position:</span>\n              <div>X: {Math.round(component.xPosition)}px</div>\n              <div>Y: {Math.round(component.yPosition)}px</div>\n            </div>\n            <div>\n              <span className=\"font-medium\">Dimensions:</span>\n              <div>W: {component.width}px</div>\n              <div>H: {component.height}px</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6305}}}